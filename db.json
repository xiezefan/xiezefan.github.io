{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":false},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":false},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":false},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":false},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":false},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/page.md","mtime":1420546214000},{"_id":"scaffolds/draft.md","mtime":1420546214000},{"_id":"scaffolds/photo.md","mtime":1420546214000},{"_id":"scaffolds/post.md","mtime":1420546214000},{"_id":"source/CNAME","mtime":1421375237000},{"_id":"source/_posts/HashMap-HashTable-diff.md","mtime":1420546214000},{"_id":"source/_posts/String-StringBuffer-StringBuilder-diff.md","mtime":1420546214000},{"_id":"source/_posts/agenda-start.md","mtime":1420546214000},{"_id":"source/_posts/final-finally-finalize-diff.md","mtime":1420546214000},{"_id":"source/_posts/finally-lose.md","mtime":1420546214000},{"_id":"source/_posts/java-constructor-base.md","mtime":1420546214000},{"_id":"source/_posts/linux-install-sdk-and-maven.md","mtime":1420546214000},{"_id":"source/_posts/maven-start.md","mtime":1420546214000},{"_id":"source/_posts/mqtt-start.md","mtime":1420546214000},{"_id":"source/_posts/sleep-wait-diff.md","mtime":1420546214000},{"_id":"source/_posts/spring-test-start.md","mtime":1420546249000},{"_id":"source/_posts/tip-git.md","mtime":1420546214000},{"_id":"source/_posts/tip-linux-common-command.md","mtime":1420546214000},{"_id":"source/_posts/tip-sublime-text-ubuntu.md","mtime":1420546214000},{"_id":"themes/yilia/README.md","mtime":1420546214000},{"_id":"themes/yilia/package.json","mtime":1420546214000},{"_id":"themes/yilia/_config.yml","mtime":1420546214000},{"_id":"themes/yilia/scripts/fancybox.js","mtime":1420546214000},{"_id":"themes/yilia/layout/archive.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/category.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/index.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/layout.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/page.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/post.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/tag.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/archive.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/article.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/footer.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/head.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/header.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","mtime":1420546214000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","mtime":1420546214000},{"_id":"themes/yilia/source/img/coderwall.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/delicious.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/facebook.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/github.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/google.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/img-err.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/img-loading.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/linkedin.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/pinboard.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/pinterest.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/rss.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/stackoverflow.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/twitter.png","mtime":1420546214000},{"_id":"themes/yilia/source/img/weibo.png","mtime":1420546214000},{"_id":"themes/yilia/source/js/instagram.js","mtime":1420546214000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","mtime":1420546214000},{"_id":"themes/yilia/source/js/main.js","mtime":1420546214000},{"_id":"themes/yilia/source/js/script.js","mtime":1420546214000},{"_id":"themes/yilia/source/css/_extend.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_variables.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/style.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/archive.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/article.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/footer.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/header.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/main.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/page.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/share.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_util/grid.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/_util/mixin.styl","mtime":1420546214000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","mtime":1420546214000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","mtime":1420546214000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","mtime":1420546214000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","mtime":1420546214000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/blank.gif","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1420546214000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1420546214000},{"_id":"source/_posts/mysql-utf8mb4.md","mtime":1422968137000}],"Category":[{"name":"nodejs","_id":"9dwcv0qpp5xqchev","posts":["ztc143pn584qt4zn"]},{"name":"java","_id":"2xw51c2lt0cm5a5n","posts":["6ql75tkjkr5350xq","ndk9cywlp2gna3a4","omp5hhxah9abjvt2","1n8h6z38d0exexra","hv3w847689wagdbt","ndba2whty3o3kgm1","nd0fr5vdsth4qsdw","3ugq79br4d0k7b43"]},{"name":"linux","_id":"0ci1u0nvq1x5hei8","posts":["zpqefdcbgt1aaibn"]},{"name":"mqtt","_id":"ezas57kg3cd957dg","posts":["z6j8w83wm80hsqsy"]},{"name":"tips","_id":"kigy5clzdf0jrcsk","posts":["jk2jj17tgsxvkwe8","f3eie1sql8oiimeh","8b1xoi10k9q1tzkd"]},{"name":"mysql","_id":"58irsrjxe7la7vr8","posts":["8r0723d09025yq7v"]}],"Page":[],"Post":[{"layout":"post","title":"Agenda笔记","date":1419782400000,"categories":["9dwcv0qpp5xqchev"],"tags":["4zvhsfskxm0oplye"],"content":"<p><a href=\"https://github.com/rschmukler/agenda\" target=\"_blank\" rel=\"external\">Agenda</a>是类似Quarzt的轻量级持久化任务调度框架, 数据存储再mongodb上, 部署与学习十分简单.<br>第三方开发者还为Agenda提供了一个简易的UI界面 <a href=\"https://github.com/moudy/agenda-ui\" target=\"_blank\" rel=\"external\">Agenda UI</a>. 提供简单的可视化界面.</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Base\">Base</h3>\n<p>Agenda 将任务对象保存再mongo里面, 任务对象包含任务的name, 附带数据, 定时规则等.<br>我们可以动态对任务进行CRUD操作. Agenda提供对应API.</p>\n<p>虽然Agenda本身提供的对Job的操作比较简单, 但因为Agenda的Job都是存储再mongo之中,所以我们可以通过直接操作monogo实现的Job的更新与删除.</p>\n<h3 id=\"Start\">Start</h3>\n<p>简单的添加任务操作:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> job = agenda.create(<span class=\"string\">'testJob'</span>, {key: <span class=\"string\">\"value\"</span>});</div><div class=\"line\">job.repeatEvery(<span class=\"string\">'5 seconds'</span>);</div><div class=\"line\">job.save(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Job successfully saved\"</span>);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>程序开始时,我们需要创建agenda对象,指定事件响应函数,并开始执行任务调用.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({db: { address: <span class=\"string\">'localhost:27017/agenda-example'</span>});</div><div class=\"line\">agenda.define(<span class=\"string\">'testJob'</span>,  <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(job)</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Job execute, now is \"</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()  + <span class=\"string\">\" Data=\"</span> + <span class=\"built_in\">JSON</span>.stringify(job.attrs.data));</div><div class=\"line\">});</div><div class=\"line\">agenda.run();</div></pre></td></tr></table></figure>\n\n<h4 id=\"数据存储\">数据存储</h4>\n<p>Agenda使用mongodb。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 指定使用的mongodb，默认使用agendaJobs集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({db: { address: <span class=\"string\">'localhost:27017/agenda-example'</span>}});</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果需要指定其他集合</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({db: { address: <span class=\"string\">'localhost:27017/agenda-test'</span>, collection: <span class=\"string\">'agendaJobs'</span> }});</div></pre></td></tr></table></figure>\n\n<h4 id=\"指定循环规制\">指定循环规制</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 直接构造的agenda对象的时候指定</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({processEvery: <span class=\"string\">'1 minute'</span>});</div><div class=\"line\"><span class=\"comment\">// 1分钟循环一次</span></div><div class=\"line\">agenda.processEvery(<span class=\"string\">'1 minute'</span>);</div></pre></td></tr></table></figure>\n\n<h4 id=\"指定任务最大并发数\">指定任务最大并发数</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 构造时指定</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({maxConcurrency: <span class=\"number\">20</span>});</div><div class=\"line\"><span class=\"comment\">// 直接指定</span></div><div class=\"line\">agenda.maxConcurrency(<span class=\"number\">20</span>);</div></pre></td></tr></table></figure>\n\n<h4 id=\"指定默认并发数\">指定默认并发数</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 构造时指定</span></div><div class=\"line\">agenda.defaultConcurrency(<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 直接指定</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({defaultConcurrency: <span class=\"number\">5</span>});</div></pre></td></tr></table></figure>\n\n<h4 id=\"设置任务最大响应时间\">设置任务最大响应时间</h4>\n<p>指定任务从开始执行到调用finish的时间（指调用done函数），这能有效的解决任务奔溃或者超时</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 构造时指定</span></div><div class=\"line\"><span class=\"keyword\">var</span> agenda = <span class=\"keyword\">new</span> Agenda({defaultLockLifetime: <span class=\"number\">10000</span>});</div><div class=\"line\"><span class=\"comment\">// 直接指定</span></div><div class=\"line\">agenda.defaultLockLifetime(<span class=\"number\">10000</span>);</div></pre></td></tr></table></figure>\n\n<h3 id=\"定义任务处理器\">定义任务处理器</h3>\n<h4 id=\"定义任务行为\">定义任务行为</h4>\n<p>当执行的任务为异步方法的时候，需要再方法最后调用done()<br>如果为同步方法，则省略声明done</p>\n<p>影响任务行为的参数：</p>\n<ul>\n<li>concurrency 指定最大任务并发数</li>\n<li>lockLifetime 锁生存时间,指定异步调用时最长等待时间</li>\n<li>priority 优先级(lowest|low|normal|high|highest|number)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 执行任务为异步方法</span></div><div class=\"line\">agenda.define(<span class=\"string\">'job_name'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(job, done)</span> </span>{</div><div class=\"line\">    doSomething(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        done();</div><div class=\"line\">    });</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 执行任务为同步方法</span></div><div class=\"line\">agenda.define(<span class=\"string\">'say hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(job)</span> </span>{</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello!\"</span>);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h4 id=\"定时任务\">定时任务</h4>\n<p>指定任务重复的规制,支持数字, cron表达式, 甚至如10 minutes等可读性较高的表达式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">job.repeatEvery('10 minutes');</div><div class=\"line\">job.repeatEvery('<span class=\"keyword\">*</span>/10 <span class=\"keyword\">*</span> <span class=\"keyword\">*</span> <span class=\"keyword\">*</span> <span class=\"keyword\">*</span> <span class=\"keyword\">*</span> <span class=\"keyword\">*</span>');</div></pre></td></tr></table></figure>\n\n<p>指定特定的重复时间</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 每天15:30</span></div><div class=\"line\">job.repeatAt(<span class=\"string\">'3:30pm'</span>);</div></pre></td></tr></table></figure>\n\n<p>指定只执行一次的的任务</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">job.schedule(<span class=\"string\">'3:30pm'</span>);</div></pre></td></tr></table></figure>\n\n<p>now<br>马上执行某事件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">agenda.now(<span class=\"string\">'do the hokey pokey'</span>);</div></pre></td></tr></table></figure>\n\n","source":"_posts/agenda-start.md","raw":"---\nlayout: post\ntitle: \"Agenda笔记\"\ndate: 2014-12-29\ncategories:\n- nodejs\ntags:\n- agenda\n\n---\n\n[Agenda][1]是类似Quarzt的轻量级持久化任务调度框架, 数据存储再mongodb上, 部署与学习十分简单.\n第三方开发者还为Agenda提供了一个简易的UI界面 [Agenda UI][2]. 提供简单的可视化界面.\n\n<!-- more -->\n\n### Base\nAgenda 将任务对象保存再mongo里面, 任务对象包含任务的name, 附带数据, 定时规则等.\n我们可以动态对任务进行CRUD操作. Agenda提供对应API.\n\n虽然Agenda本身提供的对Job的操作比较简单, 但因为Agenda的Job都是存储再mongo之中,所以我们可以通过直接操作monogo实现的Job的更新与删除.\n\n### Start\n简单的添加任务操作:\n```\nvar job = agenda.create('testJob', {key: \"value\"});\njob.repeatEvery('5 seconds');\njob.save(function(err) {\n    console.log(\"Job successfully saved\");\n});\n```\n程序开始时,我们需要创建agenda对象,指定事件响应函数,并开始执行任务调用.\n\n```\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'});\nagenda.define('testJob',  function(job) {\n    console.log(\"Job execute, now is \" + new Date()  + \" Data=\" + JSON.stringify(job.attrs.data));\n});\nagenda.run();\n```\n\n\n#### 数据存储\nAgenda使用mongodb。\n\n```\n// 指定使用的mongodb，默认使用agendaJobs集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'}});\n\n// 如果需要指定其他集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-test', collection: 'agendaJobs' }});\n```\n\n#### 指定循环规制\n\n```\n// 直接构造的agenda对象的时候指定\nvar agenda = new Agenda({processEvery: '1 minute'});\n// 1分钟循环一次\nagenda.processEvery('1 minute');\n\n```\n\n#### 指定任务最大并发数\n\n```\n// 构造时指定\nvar agenda = new Agenda({maxConcurrency: 20});\n// 直接指定\nagenda.maxConcurrency(20);\n```\n\n#### 指定默认并发数\n\n```\n// 构造时指定\nagenda.defaultConcurrency(5);\n// 直接指定\nvar agenda = new Agenda({defaultConcurrency: 5});\n```\n\n#### 设置任务最大响应时间\n指定任务从开始执行到调用finish的时间（指调用done函数），这能有效的解决任务奔溃或者超时\n\n\n```\n// 构造时指定\nvar agenda = new Agenda({defaultLockLifetime: 10000});\n// 直接指定\nagenda.defaultLockLifetime(10000);\n```\n\n\n### 定义任务处理器\n\n#### 定义任务行为\n当执行的任务为异步方法的时候，需要再方法最后调用done()\n如果为同步方法，则省略声明done\n\n影响任务行为的参数：\n\n* concurrency 指定最大任务并发数\n* lockLifetime 锁生存时间,指定异步调用时最长等待时间\n* priority 优先级(lowest|low|normal|high|highest|number)\n\n\n```\n// 执行任务为异步方法\nagenda.define('job_name', function(job, done) {\n    doSomething(function() {\n        done();\n    });\n});\n\n// 执行任务为同步方法\nagenda.define('say hello', function(job) {\n  console.log(\"Hello!\");\n});\n```\n\n#### 定时任务\n\n指定任务重复的规制,支持数字, cron表达式, 甚至如10 minutes等可读性较高的表达式\n\n```\njob.repeatEvery('10 minutes');\njob.repeatEvery('*/10 * * * * * *');\n```\n\n指定特定的重复时间\n\n```\n// 每天15:30\njob.repeatAt('3:30pm');\n```\n指定只执行一次的的任务\n\n```\njob.schedule('3:30pm');\n```\n\nnow\n马上执行某事件\n```\nagenda.now('do the hokey pokey');\n```\n\n\n  [1]: https://github.com/rschmukler/agenda\n  [2]: https://github.com/moudy/agenda-ui","slug":"agenda-start","updated":1420546214000,"excerpt":"<p><a href=\"https://github.com/rschmukler/agenda\" target=\"_blank\" rel=\"external\">Agenda</a>是类似Quarzt的轻量级持久化任务调度框架, 数据存储再mongodb上, 部署与学习十分简单.<br>第三方开发者还为Agenda提供了一个简易的UI界面 <a href=\"https://github.com/moudy/agenda-ui\" target=\"_blank\" rel=\"external\">Agenda UI</a>. 提供简单的可视化界面.</p>\n","_id":"ztc143pn584qt4zn","comments":true,"photos":[],"link":""},{"layout":"post","title":"final, finally, finalize的区别","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"description":"final, finally, finalize的区别","content":"<h2 id=\"final,_finally,_finalize的区别\">final, finally, finalize的区别</h2>\n<h3 id=\"final\">final</h3>\n<ul>\n<li>如果一个类被声明为final，此类被能被重载。因此final和abstract不能同时修饰一个类</li>\n<li>如果一个方法被声明为final，此方法只能被使用，不能被重载</li>\n<li>如果一个变量被声明为final，此变量只能被使用，不能被修改，并且在声明的时候一定要初始化</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"finally\">finally</h3>\n<p>异常处理的程序块，使用finally来进行必要的清理工作（如关闭数据库联系，文件流之类的）。<br>值得一提的是  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testFinally1</span>() {</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        i++;</div><div class=\"line\">        <span class=\"keyword\">return</span> i++;</div><div class=\"line\">    } <span class=\"keyword\">finally</span> {</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"In finally\"</span>);</div><div class=\"line\">        i++;</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">testFinally2</span>() {</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> {</div><div class=\"line\">        i++;</div><div class=\"line\">        <span class=\"keyword\">return</span> i++;</div><div class=\"line\">    } <span class=\"keyword\">finally</span> {</div><div class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"In finally\"</span>);</div><div class=\"line\">        i++;</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>testFinally1()返回的值是1，testFinally2()返回的值是2。 也就是说，finally会在return后执行。并且，return后，变量的改变并不会对返回值照成影响</p>\n<h3 id=\"finalize\">finalize</h3>\n<p>类似于C++的析构函数，但实际上有很大区别，垃圾回收器准备释放对象占用的存储空间的时候，就会调用finalize()方法，做一些清理工作。但是必须等到下一次垃圾回收回收动作才会回收内存。<br>所以，并不是finalize调用后内存就会被回收。因为垃圾回收是需要系统开销的。不到内存濒临用光或者程序退出的时候，垃圾回收动作很可能不会发送。<br>另外，，执行finalize的线程优先级一般比较低，所以即使垃圾回收器工作，finalize也不一定得到及时的执行<br>finalize使用场景：</p>\n<ul>\n<li>调用本地方法（如C，C++），其申请的内存是不会被垃圾回收器回收的。finalize可用来回收这部分内存。</li>\n<li>用于发现如文件是否被关闭，连接是否被关闭这种情景。</li>\n</ul>\n","source":"_posts/final-finally-finalize-diff.md","raw":"---\nlayout: post\ntitle: \"final, finally, finalize的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription:  final, finally, finalize的区别\n\n---\n\n\n## final, finally, finalize的区别\n### final\n* 如果一个类被声明为final，此类被能被重载。因此final和abstract不能同时修饰一个类\n* 如果一个方法被声明为final，此方法只能被使用，不能被重载\n* 如果一个变量被声明为final，此变量只能被使用，不能被修改，并且在声明的时候一定要初始化\n\n<!-- more -->\n\n### finally\n异常处理的程序块，使用finally来进行必要的清理工作（如关闭数据库联系，文件流之类的）。  \n值得一提的是  \n\n```\npublic int testFinally1() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\npublic int testFinally2() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\n```\ntestFinally1()返回的值是1，testFinally2()返回的值是2。 也就是说，finally会在return后执行。并且，return后，变量的改变并不会对返回值照成影响\n\n### finalize\n类似于C++的析构函数，但实际上有很大区别，垃圾回收器准备释放对象占用的存储空间的时候，就会调用finalize()方法，做一些清理工作。但是必须等到下一次垃圾回收回收动作才会回收内存。  \n所以，并不是finalize调用后内存就会被回收。因为垃圾回收是需要系统开销的。不到内存濒临用光或者程序退出的时候，垃圾回收动作很可能不会发送。  \n另外，，执行finalize的线程优先级一般比较低，所以即使垃圾回收器工作，finalize也不一定得到及时的执行  \nfinalize使用场景：\n  \n* 调用本地方法（如C，C++），其申请的内存是不会被垃圾回收器回收的。finalize可用来回收这部分内存。\n* 用于发现如文件是否被关闭，连接是否被关闭这种情景。","slug":"final-finally-finalize-diff","updated":1420546214000,"excerpt":"<h2 id=\"final,_finally,_finalize的区别\">final, finally, finalize的区别</h2>\n<h3 id=\"final\">final</h3>\n<ul>\n<li>如果一个类被声明为final，此类被能被重载。因此final和abstract不能同时修饰一个类</li>\n<li>如果一个方法被声明为final，此方法只能被使用，不能被重载</li>\n<li>如果一个变量被声明为final，此变量只能被使用，不能被修改，并且在声明的时候一定要初始化</li>\n</ul>\n","_id":"6ql75tkjkr5350xq","comments":true,"photos":[],"link":""},{"layout":"post","title":"finally引起的异常丢失问题","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"description":"finally引起的异常丢失问题","content":"<p>finally 使用不当可能出现异常丢失问题，并且该缺陷尚未被修复， 开发中需要多加注意</p>\n<a id=\"more\"></a>\n\n<h3 id=\"场景一\">场景一</h3>\n<figure class=\"highlight Java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loseException</span>() <span class=\"keyword\">throws</span> Exception {</div><div class=\"line\">\t<span class=\"keyword\">try</span> {</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Exception A\"</span>);</div><div class=\"line\">\t} <span class=\"keyword\">finally</span> {</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Exception B\"</span>);</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>调用 </p>\n<figure class=\"highlight loseException()\"><figcaption><span>``` 你会发现，Exception A 被 Exception B覆盖掉了。这是非常严重的设计缺陷，并且很难察觉这些错误。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">目前Java还未修正这个错误。 其解决办法是将所有抛出异常的方法都打包同一个<span class=\"keyword\">try</span>-<span class=\"keyword\">catch</span>中。  </div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">### 场景二</span></div></pre></td></tr></table></figure>\n\n<p>Java</p>\n<pre><code><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loseException2</span>() <span class=\"keyword\">throws</span> Exception {\n    <span class=\"keyword\">try</span> {\n        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Exception A\"</span>);\n    } <span class=\"keyword\">finally</span> {\n        <span class=\"keyword\">return</span>;\n    }\n}\n</code></pre><p>```</p>\n<p>这种方法让你更简单粗暴的丢失异常，并且不会产生任何输出。</p>\n","source":"_posts/finally-lose.md","raw":"---\nlayout: post\ntitle: \"finally引起的异常丢失问题\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription: finally引起的异常丢失问题\n\n---\n\nfinally 使用不当可能出现异常丢失问题，并且该缺陷尚未被修复， 开发中需要多加注意\n\n<!-- more -->\n\n### 场景一\n\n```Java\n\n\tpublic void loseException() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\tthrow new Exception(\"Exception B\");\n\t\t}\n\t}\n\n```\n\n调用 ``` loseException() ``` 你会发现，Exception A 被 Exception B覆盖掉了。这是非常严重的设计缺陷，并且很难察觉这些错误。\n目前Java还未修正这个错误。 其解决办法是将所有抛出异常的方法都打包同一个try-catch中。  \n\n### 场景二\n\n```Java\n\n\tpublic void loseException2() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\treturn;\n\t\t}\n\t}\n\n```\n\n这种方法让你更简单粗暴的丢失异常，并且不会产生任何输出。","slug":"finally-lose","updated":1420546214000,"excerpt":"<p>finally 使用不当可能出现异常丢失问题，并且该缺陷尚未被修复， 开发中需要多加注意</p>\n","_id":"ndk9cywlp2gna3a4","comments":true,"photos":[],"link":""},{"layout":"post","title":"基类构造函数，子类构造函数，成员类构造函数的调用顺序","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"content":"<p>这是Java 笔试经常遇到的一个问题，所有特定写代码研究下。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">public</span> Father() {</div><div class=\"line\">        System.out.println(<span class=\"string\">\"In Father\"</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Children</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">private</span> Friend friend = <span class=\"keyword\">new</span> Friend();</div><div class=\"line\">    <span class=\"keyword\">public</span> Children() {</div><div class=\"line\">        System.out.println(<span class=\"string\">\"In Children\"</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Friend</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">public</span> Friend() {</div><div class=\"line\">        System.out.println(<span class=\"string\">\"In Friend\"</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>以上三个对象，运行 <code>new Children();</code> ，执行的结果是</p>\n<pre><code><span class=\"keyword\">In</span> Father\n<span class=\"keyword\">In</span> <span class=\"keyword\">Friend</span>\n<span class=\"keyword\">In</span> Children\n</code></pre><h3 id=\"结论\">结论</h3>\n<p>先执行基类构造函数，再执行成员类构造函数，最后执行子类构造函数。</p>\n","source":"_posts/java-constructor-base.md","raw":"---\nlayout: post\ntitle: \"基类构造函数，子类构造函数，成员类构造函数的调用顺序\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\n\n---\n\n这是Java 笔试经常遇到的一个问题，所有特定写代码研究下。\n\n<!-- more -->\n\n\n\n```\n\tclass Father {\n\t    public Father() {\n\t        System.out.println(\"In Father\");\n\t    }\n\t}\n\n\tclass Children extends Father {\n\t    private Friend friend = new Friend();\n\t    public Children() {\n\t        System.out.println(\"In Children\");\n\t    }\n\n\t}\n\n\tclass Friend {\n\t    public Friend() {\n\t        System.out.println(\"In Friend\");\n\t    }\n\t}\n```\n\n\n以上三个对象，运行 ``` new Children(); ``` ，执行的结果是\n\n\tIn Father\n\tIn Friend\n\tIn Children\n\n\n### 结论\n先执行基类构造函数，再执行成员类构造函数，最后执行子类构造函数。","slug":"java-constructor-base","updated":1420546214000,"excerpt":"<p>这是Java 笔试经常遇到的一个问题，所有特定写代码研究下。</p>\n","_id":"omp5hhxah9abjvt2","comments":true,"photos":[],"link":""},{"layout":"post","title":"Linux系统安装配置JDK与Maven","date":1420214400000,"categories":["0ci1u0nvq1x5hei8"],"tags":["0qh7u1enjdrm82ro","wofweie0bsm2stnh","wgyyrjtqvu5x9z4r"],"description":"Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。","content":"<p>Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"下载\">下载</h3>\n<blockquote>\n<p>Java<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>Maven<br><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">http://maven.apache.org/download.cgi</a></p>\n</blockquote>\n<h3 id=\"配置\">配置</h3>\n<p>修改 <code>/etc/profile</code> 文件</p>\n<h4 id=\"Java\">Java</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=/usr/share/jdk1.<span class=\"number\">5.0</span>_05 </div><div class=\"line\">PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\">CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar </div><div class=\"line\"><span class=\"keyword\">export</span> JAVA_HOME </div><div class=\"line\"><span class=\"keyword\">export</span> PATH </div><div class=\"line\"><span class=\"keyword\">export</span> CLASSPATH</div></pre></td></tr></table></figure>\n\n<h4 id=\"Maven\">Maven</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAVEN_HOME=~/apache-maven-<span class=\"number\">3.2</span>.<span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">export</span> MAVEN_HOME</div></pre></td></tr></table></figure>\n\n<h4 id=\"即刻生效修改\">即刻生效修改</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> /etc/<span class=\"keyword\">profile</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"其他配置方法\">其他配置方法</h3>\n<p>上述方法是通过修改/etc/profile文件，但这个修改是全局的，所以，基于安全考虑，当只需要给某个用户权限使用这个环境变量的时候，只需修改该用户目录下的.bashrc文件并重启系统即可。<br>当然也可以直接在sheel中设置，不过此方法设置后，在关闭了sheel后就会失效， 看需求使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在sheel中导入JDK配置</span></div><div class=\"line\"><span class=\"keyword\">export</span> JAVA_HOME=/usr/share/jdk1.<span class=\"number\">5.0</span>_05</div><div class=\"line\"><span class=\"keyword\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></div><div class=\"line\"><span class=\"keyword\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</div></pre></td></tr></table></figure>\n\n<h3 id=\"参考文章\">参考文章</h3>\n<ul>\n<li><a href=\"http://zhidao.baidu.com/link?url=0XeoCXTgx-QLIMZVfWQlsak206gNr_7dkmdYHenFEB25gyt35Ctqzq5W0Kp9WmYaJT2LhSBsacETKP5Iizefm_\" target=\"_blank\" rel=\"external\">百度知道-linux下如何设置JDK环境变量</a></li>\n</ul>\n","source":"_posts/linux-install-sdk-and-maven.md","raw":"---\nlayout: post\ntitle: \"Linux系统安装配置JDK与Maven\"\ndate: 2015-01-03\ncategories: \n- linux\ntags: \n- linux\n- maven\n- jdk\ndescription: Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。\n\n---\n\nLinux 系统下快速按安装配置JDK与Maven的多种方法及利弊。\n\n<!-- more -->\n\n### 下载\n\n> Java  \n> http://www.oracle.com/technetwork/java/javase/downloads/index.html  \n> Maven  \n> http://maven.apache.org/download.cgi\n\n### 配置\n\n修改 `/etc/profile` 文件\n#### Java\n```\nJAVA_HOME=/usr/share/jdk1.5.0_05 \nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \nexport JAVA_HOME \nexport PATH \nexport CLASSPATH\n```\n#### Maven\n\n```\nMAVEN_HOME=~/apache-maven-3.2.3\nexport MAVEN_HOME\n```\n\n#### 即刻生效修改\n```\nsource /etc/profile\n```\n\n\n### 其他配置方法\n\n上述方法是通过修改/etc/profile文件，但这个修改是全局的，所以，基于安全考虑，当只需要给某个用户权限使用这个环境变量的时候，只需修改该用户目录下的.bashrc文件并重启系统即可。\n当然也可以直接在sheel中设置，不过此方法设置后，在关闭了sheel后就会失效， 看需求使用\n\n```\n# 在sheel中导入JDK配置\nexport JAVA_HOME=/usr/share/jdk1.5.0_05\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n### 参考文章\n\n* [百度知道-linux下如何设置JDK环境变量][1]\n\n\n  [1]: http://zhidao.baidu.com/link?url=0XeoCXTgx-QLIMZVfWQlsak206gNr_7dkmdYHenFEB25gyt35Ctqzq5W0Kp9WmYaJT2LhSBsacETKP5Iizefm_\n","slug":"linux-install-sdk-and-maven","updated":1420546214000,"excerpt":"<p>Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。</p>\n","_id":"zpqefdcbgt1aaibn","comments":true,"photos":[],"link":""},{"layout":"post","title":"maven入门","date":1399910400000,"categories":["2xw51c2lt0cm5a5n"],"tags":["wofweie0bsm2stnh"],"content":"<p>Maven简单入门， 快速入手</p>\n<a id=\"more\"></a>\n\n<h2 id=\"下载\">下载</h2>\n<pre><code><span class=\"label\">http:</span>//maven.apache<span class=\"preprocessor\">.org</span>/download.html\n</code></pre><h2 id=\"配置\">配置</h2>\n<pre><code>MAVEN_HOME : D:\\apache-maven-<span class=\"number\">3.0</span><span class=\"number\">.2</span>  \nMAVEN : <span class=\"variable\">%MAVEN_HOME</span><span class=\"variable\">%\\</span>bin   \n(可选） MAVEN_OPTS : -Xms256m -Xmx512m\nPATH: 添加 <span class=\"variable\">%MAVEN</span>%\n</code></pre><h2 id=\"开始\">开始</h2>\n<h3 id=\"验证安装成功\">验证安装成功</h3>\n<pre><code>mvn -<span class=\"keyword\">version</span>\n</code></pre><p>正常应该显示  </p>\n<pre><code>Apache Maven <span class=\"number\">3.2</span><span class=\"number\">.1</span> (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;<span class=\"number\">2014</span>-<span class=\"number\">02</span>-<span class=\"number\">15</span>T01:<span class=\"number\">37</span>:<span class=\"number\">52</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>)\nMaven home: <span class=\"keyword\">D</span>:\\apache-maven-<span class=\"number\">3.2</span><span class=\"number\">.1</span>\\bin\\..\nJava version: <span class=\"number\">1.7</span><span class=\"number\">.0</span>_09, vendor: Oracle Corporation\nJava home: <span class=\"keyword\">C</span>:\\Program Files\\Java\\jdk1<span class=\"number\">.7</span><span class=\"number\">.0</span>_09\\jre\n<span class=\"keyword\">Default</span> locale: zh_CN, platform encoding: GBK\nOS name: <span class=\"string\">\"windows 8\"</span>, version: <span class=\"string\">\"6.2\"</span>, arch: <span class=\"string\">\"amd64\"</span>, family: <span class=\"string\">\"windows\"</span>\n</code></pre><h3 id=\"创建项目\">创建项目</h3>\n<pre><code><span class=\"comment\">#此命令创建一个默认项目</span>\nmvn archetype:create <span class=\"variable\">-DgroupId=</span>com.xiezefan.app <span class=\"variable\">-DartifactId=</span>my-app\n<span class=\"comment\">#此命令创建一个web项目</span>\nmvn archetype:create <span class=\"variable\">-DgroupId=</span>com.xiezefan.app <span class=\"variable\">-DartifactId=</span>webappp <span class=\"variable\">-DarchetypeArtifactId=</span>maven-archetype-webapp\n</code></pre><p>创建一个默认项目，项目名为my-app，项目包结构为com.xiezefan.app  </p>\n<ul>\n<li>DgroupId 项目包结构</li>\n<li>DartifactId 项目名</li>\n<li>DarchetypeArtifactId 项目类型（maven-archetype-webapp是web项目，打包后生成war包）</li>\n</ul>\n<h3 id=\"常用命令\">常用命令</h3>\n<pre><code>mvn <span class=\"keyword\">package</span>  <span class=\"preprocessor\">#打包项目，感觉pox.xml的packaging确定打包成jar or war</span>\n</code></pre>","source":"_posts/maven-start.md","raw":"---\nlayout: post\ntitle: \"maven入门\"\ndate: 2014-05-13\ncategories:\n- java\ntags:\n- maven\n\n---\n\nMaven简单入门， 快速入手\n\n<!-- more -->\n\n## 下载\n    http://maven.apache.org/download.html\n\n## 配置\n    MAVEN_HOME : D:\\apache-maven-3.0.2  \n    MAVEN : %MAVEN_HOME%\\bin   \n    (可选） MAVEN_OPTS : -Xms256m -Xmx512m\n    PATH: 添加 %MAVEN%\n\n## 开始\n### 验证安装成功\n    mvn -version\n\n正常应该显示  \n\n    Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;2014-02-15T01:37:52+08:00)\n    Maven home: D:\\apache-maven-3.2.1\\bin\\..\n    Java version: 1.7.0_09, vendor: Oracle Corporation\n    Java home: C:\\Program Files\\Java\\jdk1.7.0_09\\jre\n    Default locale: zh_CN, platform encoding: GBK\n    OS name: \"windows 8\", version: \"6.2\", arch: \"amd64\", family: \"windows\"\n\n### 创建项目\n\n    #此命令创建一个默认项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=my-app\n    #此命令创建一个web项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=webappp -DarchetypeArtifactId=maven-archetype-webapp\n\n创建一个默认项目，项目名为my-app，项目包结构为com.xiezefan.app  \n\n* DgroupId 项目包结构\n* DartifactId 项目名\n* DarchetypeArtifactId 项目类型（maven-archetype-webapp是web项目，打包后生成war包）\n\n### 常用命令\n\n    mvn package  #打包项目，感觉pox.xml的packaging确定打包成jar or war","slug":"maven-start","updated":1420546214000,"excerpt":"<p>Maven简单入门， 快速入手</p>\n","_id":"1n8h6z38d0exexra","comments":true,"photos":[],"link":""},{"layout":"post","title":"MQTT 基础知识","date":1419782400000,"categories":["ezas57kg3cd957dg"],"tags":["2ck5k8l5cfpkfiz7","thdypjfvdcvj3xai"],"content":"<p>MQTT是IBM开发的一个即时通讯协议， 广泛运用在移动互联网实时推送以及相关扩展应用上，本文只要简述MQTT协议的部分知识点。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"基础内容\">基础内容</h3>\n<p>MQTT的固定头部包含以下信息</p>\n<h4 id=\"MessageType\">MessageType</h4>\n<p>消息类型，使用4位二进制标示，共16种消息类型，其中0和15位做保留待用，实际使用共14种消息事件类型</p>\n<h4 id=\"DUP_flag\">DUP flag</h4>\n<p>默认为0，标示该消息为第一次发送，当该值为一时，标示消息先前已经被传输过了，该位前置条件为Qos &gt; 0，标示消息需要回复确认</p>\n<h4 id=\"QoS_level\">QoS level</h4>\n<p>服务质量，由两个二进制位标示<br><em>　0：至多一次\n</em>　1：至少一次<br><em>　2：只有一次\n</em>　3：保留</p>\n<h4 id=\"RETAIN\">RETAIN</h4>\n<p>是否对PUBLISH消息进行持久化</p>\n<ul>\n<li>1：标示需要持久化， 当新订阅者出现时，会收到最新一个持久化消息</li>\n<li>2：标示不需要持久化，推送仅对当前订阅者<br><strong>当RETAIN=1，Payload=NULL时标示删除该Topic的持久化PUBLISH消息</strong></li>\n</ul>\n<h3 id=\"Topic通配符\">Topic通配符</h3>\n<blockquote>\n<p>/：用来表示层次，比如a/b，a/b/c。<br>#：表示匹配&gt;=0个层次，比如a/#就匹配a/，a/b，a/b/c。<br>单独的一个#表示匹配所有。<br>不允许 a#和a/#/c。<br>+：表示匹配一个层次，例如a/+匹配a/b，a/c，不匹配a/b/c。<br>单独的一个+是允许的，a+不允许，a/+/b不允许</p>\n</blockquote>\n<h3 id=\"心跳_PINGREQ/PINGRES\">心跳 PINGREQ/PINGRES</h3>\n<p>Client告知Server其心跳间隔KeepAliveTime，Client需要在该时长内发送PINGREQ，Server收到后返回PINGRES确认以保持Client与Server的长链接。<br>Server在1.5个时长内未收到PINGREQ，就断开连接<br>Client在1个时长内未收到Server的PINGRES，就断开连接<br>时间最长为18hours，0标示不断开</p>\n<h3 id=\"Clean_Session\">Clean Session</h3>\n<p>服务端是否保存Client的订阅信息</p>\n<ul>\n<li>true:保存</li>\n<li>false:不保持</li>\n</ul>\n<h3 id=\"字段建议长度\">字段建议长度</h3>\n<ul>\n<li>clientId 客户端-&gt;服务端, 服务端-&gt;客户端的单向唯一标示,length&lt;=23</li>\n<li>username 用户名,用于身份验证, length&lt;=12</li>\n<li>password 用户密码,用户身份验证, length&lt;=12</li>\n</ul>\n<h3 id=\"遗嘱消息_WillMessage\">遗嘱消息 WillMessage</h3>\n<p>遗嘱消息标示客户端网络异常导致连接中断后, 服务器将发布该遗嘱消息<br>遗嘱消息包含以下信息:</p>\n<ul>\n<li>Will Flag:是否定义遗嘱消息，Will Flag=1是标示指定遗嘱消息，否则将直接忽略Will Qos，Will RETAIN的值</li>\n<li>Will Qos:遗嘱消息的通讯质量</li>\n<li>Will RETAIN:遗嘱消息是否持久化</li>\n<li>Will Topic:遗嘱消息主题</li>\n<li>Will Message:遗嘱消息Payload</li>\n</ul>\n<h3 id=\"建立连接CONNECT的响应机制\">建立连接CONNECT的响应机制</h3>\n<ul>\n<li>客户端绕过CONNECT消息直接发送其它类型消息，服务器应关闭此非法连接</li>\n<li>客户端发送CONNECT之后未收到CONNACT，需要关闭当前连接，然后重新连接</li>\n<li>相同Client ID客户端已连接到服务器，先前客户端必须断开连接后，服务器才能完成新的客户端CONNECT连接</li>\n<li>客户端发送无效非法CONNECT消息，服务器需要关闭</li>\n</ul>\n<h3 id=\"参考资料\">参考资料</h3>\n<ul>\n<li><a href=\"http://www.cnblogs.com/caca/p/mqtt.html\" target=\"_blank\" rel=\"external\">MQTT协议简记</a></li>\n<li><a href=\"http://www.blogjava.net/yongboy/archive/2014/02/07/409587.html\" target=\"_blank\" rel=\"external\">MQTT协议笔记之头部信息</a></li>\n<li><a href=\"http://www.blogjava.net/yongboy/archive/2014/02/09/409630.html\" target=\"_blank\" rel=\"external\">MQTT协议笔记之连接和心跳</a></li>\n</ul>\n","source":"_posts/mqtt-start.md","raw":"---\nlayout: post\ntitle: \"MQTT 基础知识\"\ndate: 2014-12-29\ncategories:\n- mqtt\ntags:\n- mqtt \n- im\n\n---\n\nMQTT是IBM开发的一个即时通讯协议， 广泛运用在移动互联网实时推送以及相关扩展应用上，本文只要简述MQTT协议的部分知识点。\n\n<!-- more -->\n\n### 基础内容\n\nMQTT的固定头部包含以下信息\n\n#### MessageType\n消息类型，使用4位二进制标示，共16种消息类型，其中0和15位做保留待用，实际使用共14种消息事件类型\n\n#### DUP flag \n默认为0，标示该消息为第一次发送，当该值为一时，标示消息先前已经被传输过了，该位前置条件为Qos > 0，标示消息需要回复确认\n\n#### QoS level\n服务质量，由两个二进制位标示\n*　0：至多一次\n*　1：至少一次\n*　2：只有一次\n*　3：保留\n\n#### RETAIN\n是否对PUBLISH消息进行持久化\n* 1：标示需要持久化， 当新订阅者出现时，会收到最新一个持久化消息\n* 2：标示不需要持久化，推送仅对当前订阅者\n**当RETAIN=1，Payload=NULL时标示删除该Topic的持久化PUBLISH消息**\n\n### Topic通配符\n> /：用来表示层次，比如a/b，a/b/c。\n> \\#：表示匹配>=0个层次，比如a/#就匹配a/，a/b，a/b/c。\n> 单独的一个#表示匹配所有。\n> 不允许 a#和a/#/c。\n> +：表示匹配一个层次，例如a/+匹配a/b，a/c，不匹配a/b/c。\n> 单独的一个+是允许的，a+不允许，a/+/b不允许\n\n### 心跳 PINGREQ/PINGRES\nClient告知Server其心跳间隔KeepAliveTime，Client需要在该时长内发送PINGREQ，Server收到后返回PINGRES确认以保持Client与Server的长链接。\nServer在1.5个时长内未收到PINGREQ，就断开连接\nClient在1个时长内未收到Server的PINGRES，就断开连接\n时间最长为18hours，0标示不断开\n\n### Clean Session\n服务端是否保存Client的订阅信息\n* true:保存\n* false:不保持\n\n### 字段建议长度\n* clientId 客户端->服务端, 服务端->客户端的单向唯一标示,length<=23\n* username 用户名,用于身份验证, length<=12\n* password 用户密码,用户身份验证, length<=12\n\n\n### 遗嘱消息 WillMessage\n遗嘱消息标示客户端网络异常导致连接中断后, 服务器将发布该遗嘱消息\n遗嘱消息包含以下信息:\n* Will Flag:是否定义遗嘱消息，Will Flag=1是标示指定遗嘱消息，否则将直接忽略Will Qos，Will RETAIN的值\n* Will Qos:遗嘱消息的通讯质量\n* Will RETAIN:遗嘱消息是否持久化\n* Will Topic:遗嘱消息主题\n* Will Message:遗嘱消息Payload\n\n### 建立连接CONNECT的响应机制\n* 客户端绕过CONNECT消息直接发送其它类型消息，服务器应关闭此非法连接\n* 客户端发送CONNECT之后未收到CONNACT，需要关闭当前连接，然后重新连接\n* 相同Client ID客户端已连接到服务器，先前客户端必须断开连接后，服务器才能完成新的客户端CONNECT连接\n* 客户端发送无效非法CONNECT消息，服务器需要关闭\n\n\n\n### 参考资料\n\n* [MQTT协议简记][1]\n* [MQTT协议笔记之头部信息][2]\n* [MQTT协议笔记之连接和心跳][3]\n\n\n  [1]: http://www.cnblogs.com/caca/p/mqtt.html\n  [2]: http://www.blogjava.net/yongboy/archive/2014/02/07/409587.html\n  [3]: http://www.blogjava.net/yongboy/archive/2014/02/09/409630.html","slug":"mqtt-start","updated":1420546214000,"excerpt":"<p>MQTT是IBM开发的一个即时通讯协议， 广泛运用在移动互联网实时推送以及相关扩展应用上，本文只要简述MQTT协议的部分知识点。</p>\n","_id":"z6j8w83wm80hsqsy","comments":true,"photos":[],"link":""},{"layout":"post","title":"sleep(), wait()的区别","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"content":"<h3 id=\"sleep(),_wait()的区别\">sleep(), wait()的区别</h3>\n<h4 id=\"sleep(milliseconds)\">sleep(milliseconds)</h4>\n<p>接收一个参数，使当前线程休眠一段时间。用户线程控制。<br>特点：  </p>\n<ul>\n<li>不释放同步锁。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"wait()\">wait()</h4>\n<p>调用wait()方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify()方法后，才会重新激活调用者。<br>特定：  </p>\n<ul>\n<li>释放同步锁</li>\n</ul>\n<h4 id=\"总结\">总结</h4>\n<p>其实两者都可以让线程暂停一段时间,但是本质的区别是一个线程的运行状态控制,一个是线程之间的通讯的问题</p>\n","source":"_posts/sleep-wait-diff.md","raw":"---\nlayout: post\ntitle: \"sleep(), wait()的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\n\n---\n\n\n### sleep(), wait()的区别\n\n#### sleep(milliseconds)\n接收一个参数，使当前线程休眠一段时间。用户线程控制。\n特点：  \n\n* 不释放同步锁。\n\n<!-- more -->\n\n#### wait()\n调用wait()方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify()方法后，才会重新激活调用者。\n特定：  \n\n* 释放同步锁\n\n#### 总结\n其实两者都可以让线程暂停一段时间,但是本质的区别是一个线程的运行状态控制,一个是线程之间的通讯的问题\n\n\n","slug":"sleep-wait-diff","updated":1420546214000,"excerpt":"<h3 id=\"sleep(),_wait()的区别\">sleep(), wait()的区别</h3>\n<h4 id=\"sleep(milliseconds)\">sleep(milliseconds)</h4>\n<p>接收一个参数，使当前线程休眠一段时间。用户线程控制。<br>特点：  </p>\n<ul>\n<li>不释放同步锁。</li>\n</ul>\n","_id":"hv3w847689wagdbt","comments":true,"photos":[],"link":""},{"layout":"post","title":"使用Spring Test编写单元测试","date":1420473600000,"categories":["2xw51c2lt0cm5a5n"],"tags":["0d4ctkho5dl0wrxg"],"description":"用Spring Test的话, 可以指定在测试用例执行完毕后,对数据库进行回滚操作","content":"<p>在编写单元测试的时候,特别是涉及数据存储的单元测试环境中,我们需要保证测试环境的整洁,避免测试数据污染正常使用的数据库.<br>通常的做法是, 创建一个测试数据库, 使用配置文件控制在测试环境下, 数据持久化到测试环境. 这种方法比较笨拙.<br>如果使用Spring Test的话, 就可以指定在测试用例执行完毕后,对数据库进行回滚操作.</p>\n<a id=\"more\"></a>\n\n<h3 id=\"依赖管理\">依赖管理</h3>\n<h4 id=\"JUnit\">JUnit</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- junit --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"title\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"title\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"title\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"title\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"Spring_Test\">Spring Test</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- spring test --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"title\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"title\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">version</span>&gt;</span>4.1.2.RELEASE<span class=\"tag\">&lt;/<span class=\"title\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"title\">scope</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"测试用例编写\">测试用例编写</h3>\n<p>在未使用Spring Test之前, 我们可以用<code>ApplicationContext</code>获取实例, 但该方法不够便捷, 每个单元测试类都需要编写一套初始化代码.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">ApplicationContext applicationContext</span> = new ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\"><span class=\"constant\">MessageDao messageDao</span> = applicationContext.getBean(<span class=\"string\">\"messageDao\"</span>);</div></pre></td></tr></table></figure>\n\n<p>在此可以使用Spring Test, 以期使用注解注入需要使用到的实例. 如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"annotation\">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"annotation\">@ContextConfiguration</span>(locations=<span class=\"string\">\"classpath:applicationContext.xml\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageDaoTest</span> </span>{</div><div class=\"line\">    <span class=\"annotation\">@Resource</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MessageDao messageDao;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在此, 单元测试类可以选择继承自<code>AbstractJUnit4SpringContextTests</code>或<code>AbstractTransactionalJUnit4SpringContextTests</code>. 关于上述两者的区别:</p>\n<blockquote>\n<p>如果再你的测试类中，需要用到事务管理（比如要在测试结果出来之后回滚测试内容），就可以使用AbstractTransactionalJUnit4SpringTests类。事务管理的使用方法和正常使用Spring事务管理是一样的。再此需要注意的是，如果想要使用声明式事务管理，即使用AbstractTransactionalJUnitSpringContextTests类，请在applicationContext.xml文件中加入transactionManager bean<br>摘至: <a href=\"http://blog.csdn.net/feihong247/article/details/7828143\" target=\"_blank\" rel=\"external\">Spring Test 整合 JUnit 4 使用总结</a></p>\n</blockquote>\n<p>在继承 <code>AbstractTransactionalJUnit4SpringContextTests</code> 后, 测试用例执行完成后, 所有涉及的数据库操作都会被回滚,十分方便. 不用再测试完成后再做清理现场的操作.</p>\n<p>在编写测试用例的时候, 一些注解的说明</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"annotation\">@BeforeClass</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">static</span> <span class=\"title\">beforeClass</span>() {<span class=\"comment\">// 做一些测试前置数据的创建工作, 只执行一次}</span></div><div class=\"line\"><span class=\"annotation\">@Before</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span>() {<span class=\"comment\">// 做一些测试前置数据的创建工作, 他对于每一个测试方法都回执行一次}</span></div><div class=\"line\"><span class=\"annotation\">@AfterClass</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">static</span> <span class=\"title\">afterClass</span>() {<span class=\"comment\">//做一些清理现场,释放资源的操作, 只执行一次 }</span></div><div class=\"line\"><span class=\"annotation\">@After</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span>() { <span class=\"comment\">//做一些清理现场,释放资源的操作, 他对于每一个测试方法都回执行一次}</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"后记\">后记</h3>\n<p>对于使用Spring Test做单元测试并不是十全十美, 因为有一些存储操作, 我们并不希望交由Spring管理,  例如项目中使用redis做一些缓存操作, 在使用单元测试后, 必须删除对应的缓存数据, 这时候只能手动清理现场.<br>(虽然使用Spring-data-redis能交由spring管理事物, 但考虑到其他需求, 没有引入)</p>\n<h3 id=\"参考资料\">参考资料</h3>\n<p><a href=\"http://blog.csdn.net/feihong247/article/details/7828143\" target=\"_blank\" rel=\"external\">Spring Test 整合 JUnit 4 使用总结</a></p>\n","source":"_posts/spring-test-start.md","raw":"---\nlayout: post\ntitle: \"使用Spring Test编写单元测试\"\ndate: 2015-01-06\ncategories: \n- java\ntags: \n- spring-test\ndescription: \"用Spring Test的话, 可以指定在测试用例执行完毕后,对数据库进行回滚操作\"\n\n---\n\n在编写单元测试的时候,特别是涉及数据存储的单元测试环境中,我们需要保证测试环境的整洁,避免测试数据污染正常使用的数据库.  \n通常的做法是, 创建一个测试数据库, 使用配置文件控制在测试环境下, 数据持久化到测试环境. 这种方法比较笨拙.  \n如果使用Spring Test的话, 就可以指定在测试用例执行完毕后,对数据库进行回滚操作.\n\n<!-- more -->\n\n### 依赖管理\n#### JUnit\n```\n<!-- junit -->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n</dependency>\n```\n#### Spring Test\n```\n<!-- spring test -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>4.1.2.RELEASE</version>\n    <scope>test</scope>\n</dependency>\n```\n\n### 测试用例编写\n在未使用Spring Test之前, 我们可以用`ApplicationContext`获取实例, 但该方法不够便捷, 每个单元测试类都需要编写一套初始化代码.\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\nMessageDao messageDao = applicationContext.getBean(\"messageDao\");\n```\n\n在此可以使用Spring Test, 以期使用注解注入需要使用到的实例. 如下:\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class MessageDaoTest {\n    @Resource\n    private MessageDao messageDao;\n}\n```\n\n在此, 单元测试类可以选择继承自`AbstractJUnit4SpringContextTests`或`AbstractTransactionalJUnit4SpringContextTests`. 关于上述两者的区别:\n> 如果再你的测试类中，需要用到事务管理（比如要在测试结果出来之后回滚测试内容），就可以使用AbstractTransactionalJUnit4SpringTests类。事务管理的使用方法和正常使用Spring事务管理是一样的。再此需要注意的是，如果想要使用声明式事务管理，即使用AbstractTransactionalJUnitSpringContextTests类，请在applicationContext.xml文件中加入transactionManager bean\n摘至: [Spring Test 整合 JUnit 4 使用总结][1]\n\n在继承 `AbstractTransactionalJUnit4SpringContextTests` 后, 测试用例执行完成后, 所有涉及的数据库操作都会被回滚,十分方便. 不用再测试完成后再做清理现场的操作.\n\n在编写测试用例的时候, 一些注解的说明\n```\n@BeforeClass\npublic void static beforeClass() {// 做一些测试前置数据的创建工作, 只执行一次}\n@Before\npublic void before() {// 做一些测试前置数据的创建工作, 他对于每一个测试方法都回执行一次}\n@AfterClass\npublic void static afterClass() {//做一些清理现场,释放资源的操作, 只执行一次 }\n@After\npublic void after() { //做一些清理现场,释放资源的操作, 他对于每一个测试方法都回执行一次}\n```\n\n### 后记\n对于使用Spring Test做单元测试并不是十全十美, 因为有一些存储操作, 我们并不希望交由Spring管理,  例如项目中使用redis做一些缓存操作, 在使用单元测试后, 必须删除对应的缓存数据, 这时候只能手动清理现场.\n(虽然使用Spring-data-redis能交由spring管理事物, 但考虑到其他需求, 没有引入)\n\n### 参考资料\n[Spring Test 整合 JUnit 4 使用总结][1]\n\n  [1]: http://blog.csdn.net/feihong247/article/details/7828143","slug":"spring-test-start","updated":1420546249000,"excerpt":"<p>在编写单元测试的时候,特别是涉及数据存储的单元测试环境中,我们需要保证测试环境的整洁,避免测试数据污染正常使用的数据库.<br>通常的做法是, 创建一个测试数据库, 使用配置文件控制在测试环境下, 数据持久化到测试环境. 这种方法比较笨拙.<br>如果使用Spring Test的话, 就可以指定在测试用例执行完毕后,对数据库进行回滚操作.</p>\n","_id":"ndba2whty3o3kgm1","comments":true,"photos":[],"link":""},{"layout":"post","title":"Git常用命令集","date":1412438400000,"categories":["kigy5clzdf0jrcsk"],"tags":["8akin5ttq0kvin1z"],"content":"<a id=\"more\"></a>\n\n<p><strong>生成SSH Key</strong></p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “committer_email@committermail.com”  </p>\n</blockquote>\n<p><strong>查看自己拥有的权限</strong></p>\n<blockquote>\n<p>ssh -lgit <git host=\"\"><br>exp: ssh -lgit git.jpushoa.com</git></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><strong>添加并提交到本地库</strong></p>\n<blockquote>\n<p>git commit -m ‘your comment’</p>\n</blockquote>\n<p><strong>将本地仓库添加到远程库</strong></p>\n<blockquote>\n<p>git remote add origin <your git.git=\"\"></your></p>\n</blockquote>\n<p><strong>分支</strong></p>\n<blockquote>\n<p>git branch -r    #查看所有分支<br>git branch [branch_name] #创建新分支<br>git checkout [branch_name] #切换到分支<br>git push origin branch_name #上传分支到远程服务器<br>git branch —set-upstream master origin/master #将本地分支链接到远程分支</p>\n</blockquote>\n<p><strong>Tag</strong></p>\n<blockquote>\n<p>git tag #显示标签<br>git tag -a v3.1.1 -m ‘version 3.1.1’    ＃添加标签<br>git push origin v3.1.1 ＃推送到云端<br>git tag -d v3.1.1 # 删除标签<br>git push origin :refs/tags/v3.1.1 # 将删除操作更新到远程git库</p>\n</blockquote>\n","source":"_posts/tip-git.md","raw":"---\nlayout: post\ntitle: \"Git常用命令集\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- git\n---\n\n\n<!-- more -->\n\n**生成SSH Key**\n> ssh-keygen -t rsa -C \"committer_email@committermail.com\"  \n\n**查看自己拥有的权限**\n> ssh -lgit <git host>\n> exp: ssh -lgit git.jpushoa.com\n\n<!-- more -->\n\n**添加并提交到本地库**\n> git commit -m 'your comment'\n\n**将本地仓库添加到远程库**\n> git remote add origin <your git.git>\n\n**分支**\n> git branch -r    #查看所有分支\n> git branch [branch_name] #创建新分支\n> git checkout [branch_name] #切换到分支\n> git push origin branch_name #上传分支到远程服务器\n> git branch --set-upstream master origin/master #将本地分支链接到远程分支\n\n**Tag**\n> git tag #显示标签\n> git tag -a v3.1.1 -m 'version 3.1.1'    ＃添加标签\n> git push origin v3.1.1 ＃推送到云端\n> git tag -d v3.1.1 # 删除标签\n> git push origin :refs/tags/v3.1.1 # 将删除操作更新到远程git库\n","slug":"tip-git","updated":1420546214000,"excerpt":"<!-- more -->\n\n<p><strong>生成SSH Key</strong></p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “committer_email@committermail.com”  </p>\n</blockquote>\n<p><strong>查看自己拥有的权限</strong></p>\n<blockquote>\n<p>ssh -lgit <git host=\"\"><br>exp: ssh -lgit git.jpushoa.com</git></p>\n</blockquote>\n","_id":"jk2jj17tgsxvkwe8","comments":true,"photos":[],"link":""},{"layout":"post","title":"Linux常用命令","date":1412438400000,"categories":["kigy5clzdf0jrcsk"],"tags":["0qh7u1enjdrm82ro"],"content":"<p><strong>安装右键从终端启动</strong></p>\n<blockquote>\n<p>sudo apt-get install nautilus-open-terminal</p>\n</blockquote>\n<p><strong>复制文件到远程目录</strong></p>\n<blockquote>\n<p>scp filename  xiezf@192.168.248.124:/home/push</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><strong>如果是复制文件夹，使用</strong></p>\n<blockquote>\n<p>scp -r filename  xiezf@192.168.248.124:/home/push</p>\n</blockquote>\n<p><strong>清理dns cache</strong></p>\n<blockquote>\n<p>sudo /etc/init.d/dns-clean start </p>\n</blockquote>\n<p><strong>查看域名解析</strong></p>\n<blockquote>\n<p>nslookup  api.jpush.cn</p>\n</blockquote>\n","source":"_posts/tip-linux-common-command.md","raw":"---\nlayout: post\ntitle: \"Linux常用命令\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- linux \n---\n\n\n**安装右键从终端启动**\n> sudo apt-get install nautilus-open-terminal\n\n**复制文件到远程目录**\n> scp filename  xiezf@192.168.248.124:/home/push\n\n<!-- more -->\n\n**如果是复制文件夹，使用**\n> scp -r filename  xiezf@192.168.248.124:/home/push\n\n**清理dns cache**\n> sudo /etc/init.d/dns-clean start \n\n**查看域名解析**\n> nslookup  api.jpush.cn","slug":"tip-linux-common-command","updated":1420546214000,"excerpt":"<p><strong>安装右键从终端启动</strong></p>\n<blockquote>\n<p>sudo apt-get install nautilus-open-terminal</p>\n</blockquote>\n<p><strong>复制文件到远程目录</strong></p>\n<blockquote>\n<p>scp filename  xiezf@192.168.248.124:/home/push</p>\n</blockquote>\n","_id":"f3eie1sql8oiimeh","comments":true,"photos":[],"link":""},{"layout":"post","title":"Ubuntu快速安装Sublime-Text","date":1412438400000,"categories":["kigy5clzdf0jrcsk"],"tags":["xbzaafwxe07511zi"],"content":"<h3 id=\"通过添加PPA安装\">通过添加PPA安装</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:webupd8team</span>/sublime-text-<span class=\"number\">2</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install sublime-text-<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"安装Soda主题\">安装Soda主题</h3>\n<p>安装 Package Control, 按 <code>Ctrl+~</code>进入控制台，粘贴以下代码</p>\n<blockquote>\n<p>import urllib2,os; pf=’Package Control.sublime-package’; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘<a href=\"http://sublime.wbond.net/&#39;+pf.replace(\" target=\"_blank\" rel=\"external\">http://sublime.wbond.net/&#39;+pf.replace(</a>‘ ‘,’%20’)).read()); print ‘Please restart Sublime Text to finish installation’</p>\n</blockquote>\n<p>preferences -&gt; package control -&gt; 输入install package<br>在此打开控制台，输入Soda，选择 Theme-Soda<br>Preferences -&gt; Settings – User中修改参数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">ignored_packages</span>\":</div><div class=\"line\">    <span class=\"value\">[</span></div><div class=\"line\">        <span class=\"string\">\"Vintage\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    \"<span class=\"attribute\">theme</span>\": <span class=\"value\"><span class=\"string\">\"Soda Dark.sublime-theme\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">font_size</span>\": <span class=\"value\"><span class=\"number\">12</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">font_face</span>\": <span class=\"value\"><span class=\"string\">\"YaHei Consolas Hybrid\"</span></span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>重启Sublime Text</p>\n","source":"_posts/tip-sublime-text-ubuntu.md","raw":"---\nlayout: post\ntitle: \"Ubuntu快速安装Sublime-Text\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- sublime-text\n---\n\n\n### 通过添加PPA安装\n```\nsudo add-apt-repository ppa:webupd8team/sublime-text-2\nsudo apt-get update\nsudo apt-get install sublime-text-2\n```\n\n<!-- more -->\n\n### 安装Soda主题\n安装 Package Control, 按 `Ctrl+~`进入控制台，粘贴以下代码\n> import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'\n\npreferences -> package control -> 输入install package\n在此打开控制台，输入Soda，选择 Theme-Soda\nPreferences -> Settings – User中修改参数\n```\n{\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    \"theme\": \"Soda Dark.sublime-theme\",\n    \"font_size\": 12,\n    \"font_face\": \"YaHei Consolas Hybrid\"\n}\n```\n重启Sublime Text\n\n\n","slug":"tip-sublime-text-ubuntu","updated":1420546214000,"excerpt":"<h3 id=\"通过添加PPA安装\">通过添加PPA安装</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:webupd8team</span>/sublime-text-<span class=\"number\">2</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install sublime-text-<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n\n","_id":"8b1xoi10k9q1tzkd","comments":true,"photos":[],"link":""},{"layout":"post","title":"HashMap,HashTable区别","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"description":"实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap","content":"<p>实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"HashMap,HashTable区别\">HashMap,HashTable区别</h2>\n<h3 id=\"HashTable\">HashTable</h3>\n<p>特点：线程同步 </p>\n<h3 id=\"HashMap\">HashMap</h3>\n<p>特定：</p>\n<ul>\n<li>线程不同步，但可以通过 <code>Collections.synchronizedMap(HashMap map)</code> 实现线程同步。</li>\n<li>允许Key，value值为空。</li>\n<li>优于HashTable的Hash算法，使Hash值更广泛的分布到数组的不同位置。</li>\n<li>更优的效率</li>\n</ul>\n<p>实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.</p>\n","source":"_posts/HashMap-HashTable-diff.md","raw":"---\nlayout: post\ntitle: \"HashMap,HashTable区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription: 实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap\n\n---\n\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n\n<!-- more -->\n\n## HashMap,HashTable区别\n\n### HashTable\n特点：线程同步 \n\n### HashMap\n特定：\n\n* 线程不同步，但可以通过 ``` Collections.synchronizedMap(HashMap map) ``` 实现线程同步。\n* 允许Key，value值为空。\n* 优于HashTable的Hash算法，使Hash值更广泛的分布到数组的不同位置。\n* 更优的效率\n\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n","slug":"HashMap-HashTable-diff","updated":1420546214000,"excerpt":"<p>实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.</p>\n","_id":"nd0fr5vdsth4qsdw","comments":true,"photos":[],"link":""},{"layout":"post","title":"String，StringBuffer，StringBuilder的区别","date":1400428800000,"categories":["2xw51c2lt0cm5a5n"],"tags":["hih46pq4oycjgj60"],"desciption":"String，StringBuffer，StringBuilder的区别","content":"<h3 id=\"String\">String</h3>\n<p>String值是不可变的，每次对String的操作都会生出一个新的String对象。如果频繁改动的话，效率会很低，产生太多的垃圾会触发JVM的垃圾回收，影响系统性能。<br>另外 <code>String s = new String(&quot;abc&quot;)</code> 会生出两个对象, 因为括号里面的”abc”算一。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"StringBuffer\">StringBuffer</h3>\n<p>可变长度的字符串缓存区，特定是在append与insert操作的时候，速度会比String快很多。并且在多线程下是安全的。如果大量频繁的字符串操作，考虑使用该类。  </p>\n<h3 id=\"StringBuilder\">StringBuilder</h3>\n<p>5.0后新增的方法，在多线程下不保证同步（即线程不安全），但速度会比StringBuffer快。所以，在单线程的环境下，建议使用StringBuilder。 </p>\n<h3 id=\"总结\">总结</h3>\n<p>一般情况下，对字符串的操作速度 StringBuilder &gt; StringBuffer &gt; String。  </p>\n<ul>\n<li>字符串操作少的情况，使用 String</li>\n<li>单线程，字符串操作多的情况， 使用StringBuilder</li>\n<li>多线程，字符串操作多的情况， 使用StringBuffer</li>\n</ul>\n<h3 id=\"额外的注意\">额外的注意</h3>\n<p><code>String s = a + b</code> 的情况 ，实际上JVM的处理是这样<code>String c = (new StringBuilder(String.valueOf(a))).append(b).toString()</code><br>如此一来每次字符串操作都会生出一个StringBuffer对象。效率多少会有点影响的。</p>\n","source":"_posts/String-StringBuffer-StringBuilder-diff.md","raw":"---\nlayout: post\ntitle: \"String，StringBuffer，StringBuilder的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndesciption: String，StringBuffer，StringBuilder的区别\n\n---\n\n### String\nString值是不可变的，每次对String的操作都会生出一个新的String对象。如果频繁改动的话，效率会很低，产生太多的垃圾会触发JVM的垃圾回收，影响系统性能。  \n另外 `String s = new String(\"abc\") ` 会生出两个对象, 因为括号里面的\"abc\"算一。\n\n<!-- more -->\n\n### StringBuffer\n可变长度的字符串缓存区，特定是在append与insert操作的时候，速度会比String快很多。并且在多线程下是安全的。如果大量频繁的字符串操作，考虑使用该类。  \n\n\n### StringBuilder\n5.0后新增的方法，在多线程下不保证同步（即线程不安全），但速度会比StringBuffer快。所以，在单线程的环境下，建议使用StringBuilder。 \n\n### 总结\n一般情况下，对字符串的操作速度 StringBuilder > StringBuffer > String。  \n* 字符串操作少的情况，使用 String\n* 单线程，字符串操作多的情况， 使用StringBuilder\n* 多线程，字符串操作多的情况， 使用StringBuffer\n\n### 额外的注意\n`String s = a + b ` 的情况 ，实际上JVM的处理是这样` String c = (new StringBuilder(String.valueOf(a))).append(b).toString() `  \n如此一来每次字符串操作都会生出一个StringBuffer对象。效率多少会有点影响的。\n","slug":"String-StringBuffer-StringBuilder-diff","updated":1420546214000,"excerpt":"<h3 id=\"String\">String</h3>\n<p>String值是不可变的，每次对String的操作都会生出一个新的String对象。如果频繁改动的话，效率会很低，产生太多的垃圾会触发JVM的垃圾回收，影响系统性能。<br>另外 <code>String s = new String(&quot;abc&quot;)</code> 会生出两个对象, 因为括号里面的”abc”算一。</p>\n","_id":"3ugq79br4d0k7b43","comments":true,"photos":[],"link":""},{"layout":"post","title":"MySQL解决插入emoji表情失败的问题","date":1422892800000,"categories":["58irsrjxe7la7vr8"],"tags":["4kr5j1s0m02scz93"],"content":"<p>一直以为UTF-8是万能的字符集问题解决方案. 直到遇到这个问题.<br>最近在做新浪微博的爬虫, 在存库的时候, 发现只要保持emoji表情, 就回抛出以下异常</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Incorrect string value: '<span class=\"command\">\\xF</span>0<span class=\"command\">\\x</span>90<span class=\"command\">\\x</span>8D<span class=\"command\">\\x</span>83<span class=\"command\">\\xF</span>0<span class=\"command\">\\x</span>90...'</div></pre></td></tr></table></figure>\n\n<p>众所周知UTF-8是3个字节,  其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 所以便有了utf8mb4, utf8mb4是utf8的超集, 占4个字节, 向下兼容utf8. 我们日常用的emoji表情就是4个字节了.<br>所以在此我们像utf8的数据表插入数据就会报出<code>Incorrect string value</code>这个错误.</p>\n<a id=\"more\"></a>\n\n<p>Google一下很容易就找到了解决方案, 具体解决办法是:</p>\n<ul>\n<li><p>1.修改数据表的字符集为utf8mb4</p>\n<blockquote>\n<p>这点很简单, 修改语句网上找一大堆, 不过建议重新建表, 使用 <code>mysqldump -uusername -ppassword database_name table_name &gt; table.sql</code> 备份相应数据表, 并修改其中的建表语句的字符集为 utf8mb4 即可, 然后 <code>mysql -uusername -ppassword database_name &lt; table.sql</code> 重新导入sql即可完成修改字符集操作.</p>\n</blockquote>\n</li>\n<li><p>2.MySQL数据库版本要5.5.3及以上</p>\n<blockquote>\n<p>网络上所有的文章都说明要MySQL 5.5.3以上的版本才支持utf8mb4, 不过我使用的数据库版本为5.5.18, 最终仍能解决问题, 所以同学们不要急着找运维哥哥升级数据库先, 先试试能不能自己解决问题.</p>\n</blockquote>\n</li>\n<li><p>3.修改数据库配置文件<code>/etc/my.cnf</code>并重启mysql服务</p>\n<blockquote>\n<p>主要是修改数据库的默认字符集, 以及连接, 查询的字符集, [Mysql支持emoji 表情符号 升级编码为UTF8MB4][1]  这篇文章有详细的设置方法,  [深入Mysql字符集设置][2] 这篇文章有其中设置的各个字符集的作用, 大家可以科普下.</p>\n</blockquote>\n</li>\n<li><p>4.升级MySQL Connector到5.1.21及以上</p>\n</li>\n</ul>\n<p>以上所有的操作, 最关键的是步骤3, 修改数据库的配置文件, 其中大概修改了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[client]</div><div class=\"line\"><span class=\"preprocessor\"># 客户端来源数据的默认字符集</span></div><div class=\"line\"><span class=\"keyword\">default</span>-character-<span class=\"keyword\">set</span> = utf8mb4</div><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\"><span class=\"preprocessor\"># 服务端默认字符集</span></div><div class=\"line\">character-<span class=\"keyword\">set</span>-server=utf8mb4</div><div class=\"line\"><span class=\"preprocessor\"># 连接层默认字符集</span></div><div class=\"line\">collation-server=utf8mb4_unicode_ci</div><div class=\"line\"></div><div class=\"line\">[mysql]</div><div class=\"line\"><span class=\"preprocessor\"># 数据库默认字符集</span></div><div class=\"line\"><span class=\"keyword\">default</span>-character-<span class=\"keyword\">set</span> = utf8mb4</div></pre></td></tr></table></figure>\n\n<p>这些配置指定了数据从客户端到服务端所经过的一条条管道使用的字符集, 其中每一个管道出现问题都可能会导致插入失败或者乱码.</p>\n<p>但很多时候, 线上的数据库是不能随便修改数据库文件的, 所以我们的运维同学很果断的回绝了我修改数据库配置文件的请求(T_T)  </p>\n<p>所以就只能用代码解决了, 一开始是准备从JDBC连接时候就指定使用的字符集处下手.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">jdbc:mysql://localhost:3306/ding?characterEncoding</span>=<span class=\"string\">UTF-8</span></div></pre></td></tr></table></figure>\n\n<p>主要把UTF-8修改为utf8mb4对于的Java Style Charset字符串应该就能解决问题吧?<br>不过很遗憾的是, Java JDBC并不存在utf8mb4对于的字符集. 使用UTF-8的时候可以兼容urf8mb4并自动转换字符集.</p>\n<blockquote>\n<p>For example, to use 4-byte UTF-8 character sets with Connector/J, configure the MySQL server with character_set_server=utf8mb4, and leave characterEncoding out of the Connector/J connection string. Connector/J will then autodetect the UTF-8 setting.  — [MySQL:Using Character Sets and Unicode][3]</p>\n</blockquote>\n<p>后来科普了一下, 在每一次查询请求的时候, 可以显式的指定使用的字符集, 使用 <code>set names utf8mb4</code> 可以指定本次链接的字符集为utf8mb4, 但这个设置在每次连接被释放后都会失效.<br>目前的解决办法是, 在需要插入utf8mb4的时候, 显示地调用执行<code>set names utf8mb4</code>, 如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbcTemplate.<span class=\"keyword\">execute</span>(<span class=\"string\">\"set names utf8mb4\"</span>);</div><div class=\"line\">jdbcTempalte.<span class=\"keyword\">execute</span>(<span class=\"string\">\"...\"</span>);</div></pre></td></tr></table></figure>\n\n<p>需要注意的是, 我们在使用一下ORM框架的时候, 因为性能优化原因, 框架会延迟提交, 除非事务结束或者用户主动调用强制提交, 负责执行的<code>set names utf8mb4</code>仍然不会生效. </p>\n<p>在这里我使用的是myBatis, 以MessageDao为例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MessageDao</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MessageDao</span> </span>{</div><div class=\"line\">    <span class=\"annotation\">@Update</span>(<span class=\"string\">\"set names utf8mb4\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCharsetToUtf8mb4</span>();</div><div class=\"line\">    <span class=\"annotation\">@Insert</span>(<span class=\"string\">\"insert into tb_message ......\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span>(Message msg);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// test code</span></div><div class=\"line\"></div><div class=\"line\">SqlSession sqlSession = sqlSessioFactory.openSession();</div><div class=\"line\">messageDao = sqlSession.getMapper(MessageDao.class);</div><div class=\"line\">messageDao.setCharsetToUtf8mb4();</div><div class=\"line\"><span class=\"comment\">// 强制提交</span></div><div class=\"line\">sqlSession.commit();</div><div class=\"line\">messageDao.insert(message);</div></pre></td></tr></table></figure>\n\n<p>至此, 问题便解决了..<br>哎, 如果世事能那么顺利就好了, 在项目中, mybatis是实例是交由Spring去管理的, 也就是说我拿不到sqlSession, 也就是强制提交不了. 并且因为Spring事务框架的限制, 他并不允许用户显式调用强制提交.  目前还在纠结这个问题.<br>有两个解决思路:</p>\n<ol>\n<li>使用AOP, 在可能插入4字节UTF8字符的时候, 前置方法执行<code>set names utf8mb4</code>, 但该方案还不能确定AOP的方法会被Spring进行事务管理么, 并且在前置方法中,拿到的链接是否和接下来拿到的连接对象是同一个session.</li>\n<li>研究Spring JDBC的创建方法, 写一个hook在每次创建新的数据库连接的时候, 都执行一次<code>set names utf8mb4</code>, 这样就保证每一次拿到的链接都是设置过字符集的.</li>\n</ol>\n<p>待有时间再实验一下以上两种方案.</p>\n","source":"_posts/mysql-utf8mb4.md","raw":"---\nlayout: post\ntitle: \"MySQL解决插入emoji表情失败的问题\"\ndate: 2015-02-03\ncategories:\n- mysql\ntags:\n- mysql\n\n---  \n\n\n\n一直以为UTF-8是万能的字符集问题解决方案. 直到遇到这个问题.\n最近在做新浪微博的爬虫, 在存库的时候, 发现只要保持emoji表情, 就回抛出以下异常\n```\nIncorrect string value: '\\xF0\\x90\\x8D\\x83\\xF0\\x90...' \n```\n众所周知UTF-8是3个字节,  其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 所以便有了utf8mb4, utf8mb4是utf8的超集, 占4个字节, 向下兼容utf8. 我们日常用的emoji表情就是4个字节了.\n所以在此我们像utf8的数据表插入数据就会报出`Incorrect string value`这个错误.\n\n\n<!-- more -->\n\nGoogle一下很容易就找到了解决方案, 具体解决办法是:\n\n- 1.修改数据表的字符集为utf8mb4\n> 这点很简单, 修改语句网上找一大堆, 不过建议重新建表, 使用 `mysqldump -uusername -ppassword database_name table_name > table.sql` 备份相应数据表, 并修改其中的建表语句的字符集为 utf8mb4 即可, 然后 `mysql -uusername -ppassword database_name < table.sql` 重新导入sql即可完成修改字符集操作.\n\n- 2.MySQL数据库版本要5.5.3及以上\n\n    > 网络上所有的文章都说明要MySQL 5.5.3以上的版本才支持utf8mb4, 不过我使用的数据库版本为5.5.18, 最终仍能解决问题, 所以同学们不要急着找运维哥哥升级数据库先, 先试试能不能自己解决问题.\n\n- 3.修改数据库配置文件`/etc/my.cnf`并重启mysql服务\n    > 主要是修改数据库的默认字符集, 以及连接, 查询的字符集, [Mysql支持emoji 表情符号 升级编码为UTF8MB4][1]  这篇文章有详细的设置方法,  [深入Mysql字符集设置][2] 这篇文章有其中设置的各个字符集的作用, 大家可以科普下.\n\n- 4.升级MySQL Connector到5.1.21及以上\n\n以上所有的操作, 最关键的是步骤3, 修改数据库的配置文件, 其中大概修改了\n```\n[client]\n# 客户端来源数据的默认字符集\ndefault-character-set = utf8mb4\n\n[mysqld]\n# 服务端默认字符集\ncharacter-set-server=utf8mb4\n# 连接层默认字符集\ncollation-server=utf8mb4_unicode_ci\n\n[mysql]\n# 数据库默认字符集\ndefault-character-set = utf8mb4\n```\n这些配置指定了数据从客户端到服务端所经过的一条条管道使用的字符集, 其中每一个管道出现问题都可能会导致插入失败或者乱码.\n\n但很多时候, 线上的数据库是不能随便修改数据库文件的, 所以我们的运维同学很果断的回绝了我修改数据库配置文件的请求(T_T)  \n\n所以就只能用代码解决了, 一开始是准备从JDBC连接时候就指定使用的字符集处下手.\n```\njdbc:mysql://localhost:3306/ding?characterEncoding=UTF-8\n```\n主要把UTF-8修改为utf8mb4对于的Java Style Charset字符串应该就能解决问题吧? \n不过很遗憾的是, Java JDBC并不存在utf8mb4对于的字符集. 使用UTF-8的时候可以兼容urf8mb4并自动转换字符集.\n\n> For example, to use 4-byte UTF-8 character sets with Connector/J, configure the MySQL server with character_set_server=utf8mb4, and leave characterEncoding out of the Connector/J connection string. Connector/J will then autodetect the UTF-8 setting.  -- [MySQL:Using Character Sets and Unicode][3]\n\n后来科普了一下, 在每一次查询请求的时候, 可以显式的指定使用的字符集, 使用 `set names utf8mb4` 可以指定本次链接的字符集为utf8mb4, 但这个设置在每次连接被释放后都会失效. \n目前的解决办法是, 在需要插入utf8mb4的时候, 显示地调用执行`set names utf8mb4`, 如:\n```\njdbcTemplate.execute(\"set names utf8mb4\");\njdbcTempalte.execute(\"...\");\n```\n需要注意的是, 我们在使用一下ORM框架的时候, 因为性能优化原因, 框架会延迟提交, 除非事务结束或者用户主动调用强制提交, 负责执行的`set names utf8mb4`仍然不会生效. \n\n在这里我使用的是myBatis, 以MessageDao为例\n\n```\n// MessageDao\npublic interface MessageDao {\n    @Update(\"set names utf8mb4\")\n    public void setCharsetToUtf8mb4();\n    @Insert(\"insert into tb_message ......\")\n    public void insert(Message msg);\n}\n\n// test code\n\nSqlSession sqlSession = sqlSessioFactory.openSession();\nmessageDao = sqlSession.getMapper(MessageDao.class);\nmessageDao.setCharsetToUtf8mb4();\n// 强制提交\nsqlSession.commit();\nmessageDao.insert(message);\n\n```\n至此, 问题便解决了..\n哎, 如果世事能那么顺利就好了, 在项目中, mybatis是实例是交由Spring去管理的, 也就是说我拿不到sqlSession, 也就是强制提交不了. 并且因为Spring事务框架的限制, 他并不允许用户显式调用强制提交.  目前还在纠结这个问题.\n有两个解决思路:\n1. 使用AOP, 在可能插入4字节UTF8字符的时候, 前置方法执行`set names utf8mb4`, 但该方案还不能确定AOP的方法会被Spring进行事务管理么, 并且在前置方法中,拿到的链接是否和接下来拿到的连接对象是同一个session.\n2. 研究Spring JDBC的创建方法, 写一个hook在每次创建新的数据库连接的时候, 都执行一次`set names utf8mb4`, 这样就保证每一次拿到的链接都是设置过字符集的.\n\n待有时间再实验一下以上两种方案.\n","slug":"mysql-utf8mb4","updated":1422968137000,"excerpt":"<p>一直以为UTF-8是万能的字符集问题解决方案. 直到遇到这个问题.<br>最近在做新浪微博的爬虫, 在存库的时候, 发现只要保持emoji表情, 就回抛出以下异常</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Incorrect string value: '<span class=\"command\">\\xF</span>0<span class=\"command\">\\x</span>90<span class=\"command\">\\x</span>8D<span class=\"command\">\\x</span>83<span class=\"command\">\\xF</span>0<span class=\"command\">\\x</span>90...'</div></pre></td></tr></table></figure>\n\n<p>众所周知UTF-8是3个字节,  其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 所以便有了utf8mb4, utf8mb4是utf8的超集, 占4个字节, 向下兼容utf8. 我们日常用的emoji表情就是4个字节了.<br>所以在此我们像utf8的数据表插入数据就会报出<code>Incorrect string value</code>这个错误.</p>\n","_id":"8r0723d09025yq7v","comments":true,"photos":[],"link":""}],"Tag":[{"name":"agenda","_id":"4zvhsfskxm0oplye","posts":["ztc143pn584qt4zn"]},{"name":"java","_id":"hih46pq4oycjgj60","posts":["6ql75tkjkr5350xq","ndk9cywlp2gna3a4","omp5hhxah9abjvt2","hv3w847689wagdbt","nd0fr5vdsth4qsdw","3ugq79br4d0k7b43"]},{"name":"linux","_id":"0qh7u1enjdrm82ro","posts":["zpqefdcbgt1aaibn","f3eie1sql8oiimeh"]},{"name":"maven","_id":"wofweie0bsm2stnh","posts":["zpqefdcbgt1aaibn","1n8h6z38d0exexra"]},{"name":"jdk","_id":"wgyyrjtqvu5x9z4r","posts":["zpqefdcbgt1aaibn"]},{"name":"mqtt","_id":"2ck5k8l5cfpkfiz7","posts":["z6j8w83wm80hsqsy"]},{"name":"im","_id":"thdypjfvdcvj3xai","posts":["z6j8w83wm80hsqsy"]},{"name":"spring-test","_id":"0d4ctkho5dl0wrxg","posts":["ndba2whty3o3kgm1"]},{"name":"git","_id":"8akin5ttq0kvin1z","posts":["jk2jj17tgsxvkwe8"]},{"name":"sublime-text","_id":"xbzaafwxe07511zi","posts":["8b1xoi10k9q1tzkd"]},{"name":"mysql","_id":"4kr5j1s0m02scz93","posts":["8r0723d09025yq7v"]}]}