{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"2c0f6791f654ed73c45d44fc21542dc78d70ddf4","modified":1436329236000},{"_id":"source/_posts/HashMap-HashTable-diff.md","shasum":"cac276390f8ff79459f29c6ddce57bb1da60b236","modified":1436329236000},{"_id":"source/_posts/String-StringBuffer-StringBuilder-diff.md","shasum":"92746a7dda8245945292b4c4541ec357a612f36c","modified":1436329236000},{"_id":"source/_posts/agenda-start.md","shasum":"1b39978eb23756db433ea4d5c1de6a0928f830a3","modified":1436329525000},{"_id":"source/_posts/android-annotations-start.md","shasum":"d8ff93c665399ff05e966cefd765fa4aa574d6ff","modified":1436285205000},{"_id":"source/_posts/final-finally-finalize-diff.md","shasum":"0ede9e6101c04b82e335d160e216c33184ca90db","modified":1436329236000},{"_id":"source/_posts/finally-lose.md","shasum":"8e4c33929065478f3342f6f6a28e7c06ed89b773","modified":1436329236000},{"_id":"source/_posts/java-constructor-base.md","shasum":"d3222833dae3df04904200d54199b5a718b4e523","modified":1436329236000},{"_id":"source/_posts/linux-install-sdk-and-maven.md","shasum":"3391538f58f630d932dcdf43205e8119544f9640","modified":1436329236000},{"_id":"source/_posts/maven-start.md","shasum":"79e454980447ce17f5baea8b01b3e7db3520a715","modified":1436329236000},{"_id":"source/_posts/mqtt-start.md","shasum":"113fc380304abb203ffba3ef193559e0ae4f96a1","modified":1436329236000},{"_id":"source/_posts/mysql-utf8mb4.md","shasum":"e8a415ff6fbc90300375f8200e65f4301207a2f8","modified":1436329687000},{"_id":"source/_posts/sleep-wait-diff.md","shasum":"19a68277e7a3d85c3ff4642e49989f564d75d638","modified":1436329236000},{"_id":"source/_posts/spring-test-start.md","shasum":"2395a6950d6c4ef60de0fd0b374385a109c6c611","modified":1436329236000},{"_id":"source/_posts/tip-git.md","shasum":"d25b4128cfd0195647b4ff21e020f9c627916a44","modified":1436329236000},{"_id":"source/_posts/tip-linux-common-command.md","shasum":"65cc96fd57febaaca9a380fc77506341184b6fc1","modified":1436329236000},{"_id":"source/_posts/tip-sublime-text-ubuntu.md","shasum":"e3bef2834cebac4fe32d3590f2bbb3226cefe1f7","modified":1436329236000},{"_id":"themes/yilia/README.md","shasum":"ff1e89ec8f4bbfc1d4cd6d02cfd8588e737a3fd2","modified":1436329236000},{"_id":"themes/yilia/_config.yml","shasum":"ebab9b695fa4f635f018975b8e541bf97c1a60db","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"aa0e9b5aeb97bd7424b28145be1e46f189f033c1","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"a27cc79336c2cf5402ae2aa01ee3a5126fb41924","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"f5a6383f351bd516c25b617af15b1a4a39afe29f","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"b6ad6085248496d08df5d751a0ed0d8bacbed636","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"c44354f5c2000cbdc37a7a9bdbacf3646f1da225","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"4fa71db4df6d5c076004c66777edd71c24aba647","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"4fe41872f010c32fe34da0fa176398712baa03a2","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1436329236000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1436329236000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1436329236000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1436329236000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1436329236000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"3bc1bba131445a07be002f490c70cd242bf8efce","modified":1436329236000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1436329236000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1436329236000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1436329236000},{"_id":"themes/yilia/package.json","shasum":"99e419b9d09ef18345ad4fa0e46767a68f53ab46","modified":1436329236000},{"_id":"themes/yilia/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1436329236000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"81624b9d5a510cc5f47f10bd1e6a0f8ea218844f","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"09e9b4d13482ad8415029e3c1c1452fcee0f8947","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"16fa9293ad5060e5de45272a3189ac25c0332a13","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"3f74436516ef030f82db2d33f44fd401a86743a1","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"d1a61bc91761f4c90972e08187da7e378d79c41d","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"8270847ee5eaa87d7c3b040a9b6ef048288ffbc1","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a1926c78a17519150063e155ac32d5a6545eb99","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"0b5b20b33142dee8509cfebe7dbb1bd89150bad8","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"6ac15a6815b1bbdbea89d3fe933c2821aa80b926","modified":1436329236000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"b619224bdc05be2b3809daddaa7a8d78cae457b3","modified":1436329236000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1436329236000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1436329236000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1436329236000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1436329236000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1436329236000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1436329236000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1436329236000},{"_id":"themes/yilia/source/css/style.styl","shasum":"5012d8d66a4448fe373f078c0eadc0e42559f668","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"fea04e517da359d3f99fe1a72f1c9725638a797e","modified":1436329236000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1436329236000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1436329236000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1436329236000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1436329236000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1436329236000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1436329236000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1436329236000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1436329236000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1436329236000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1436329236000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1436329236000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1436329236000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1436329236000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1436329236000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1436329236000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"9c3fa2f07724b20f6f2b05bc4f2d01ea0633001d","modified":1436329236000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1436329236000},{"_id":"themes/yilia/source/js/main.js","shasum":"dd10c8763d80b593608c513cf2104cab70758770","modified":1436329236000},{"_id":"themes/yilia/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1436329236000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1436329236000},{"_id":"public/CNAME","modified":1436330117285,"shasum":"2c0f6791f654ed73c45d44fc21542dc78d70ddf4"},{"_id":"public/js/script.js","modified":1436330117289,"shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1"},{"_id":"public/js/main.js","modified":1436330117291,"shasum":"dd10c8763d80b593608c513cf2104cab70758770"},{"_id":"public/js/jquery.lazyload.js","modified":1436330117292,"shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799"},{"_id":"public/js/instagram.js","modified":1436330117293,"shasum":"9c3fa2f07724b20f6f2b05bc4f2d01ea0633001d"},{"_id":"public/img/weibo.png","modified":1436330117295,"shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b"},{"_id":"public/img/twitter.png","modified":1436330117298,"shasum":"14dbb8e62d056525253bc0de13acd1723da7a934"},{"_id":"public/img/stackoverflow.png","modified":1436330117303,"shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2"},{"_id":"public/img/rss.png","modified":1436330117309,"shasum":"430fd47340e75214c081abd05cd7410cf7c71b86"},{"_id":"public/img/pinterest.png","modified":1436330117311,"shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630"},{"_id":"public/img/pinboard.png","modified":1436330117317,"shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0"},{"_id":"public/img/linkedin.png","modified":1436330117320,"shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c"},{"_id":"public/img/img-loading.png","modified":1436330117324,"shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031"},{"_id":"public/img/img-err.png","modified":1436330117329,"shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b"},{"_id":"public/img/google.png","modified":1436330117332,"shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d"},{"_id":"public/img/github.png","modified":1436330117333,"shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d"},{"_id":"public/img/facebook.png","modified":1436330117335,"shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54"},{"_id":"public/img/delicious.png","modified":1436330117339,"shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd"},{"_id":"public/img/coderwall.png","modified":1436330117342,"shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1436330117345,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1436330117346,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1436330117348,"shasum":"fea04e517da359d3f99fe1a72f1c9725638a797e"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1436330117349,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1436330117351,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1436330117353,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1436330117356,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1436330117359,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1436330117361,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1436330117366,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1436330117371,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1436330117374,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1436330117376,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1436330117379,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1436330117382,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1436330118078,"shasum":"b170a2bb031fc6c8b19c6787215b3f238b5ca0a8"},{"_id":"public/css/fonts/fontawesome-webfont.woff","modified":1436330118268,"shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832"},{"_id":"public/css/fonts/fontawesome-webfont.ttf","modified":1436330118271,"shasum":"1480b8101b02da9bc4c60341b5e185e63e585064"},{"_id":"public/css/fonts/fontawesome-webfont.svgz","modified":1436330118272,"shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626"},{"_id":"public/css/fonts/fontawesome-webfont.svg","modified":1436330118274,"shasum":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a"},{"_id":"public/css/fonts/fontawesome-webfont.eot","modified":1436330118279,"shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6"},{"_id":"public/2015/07/07/android-annotations-start/index.html","modified":1436330118326,"shasum":"6855cef53405275bb81cdebb1b0ddbfba865f7f4"},{"_id":"public/2015/02/03/mysql-utf8mb4/index.html","modified":1436330118338,"shasum":"c8df3fa04f4a59b0d6ca02fe3e50bcfcdc2327df"},{"_id":"public/2015/01/06/spring-test-start/index.html","modified":1436330118360,"shasum":"cad0d0eadcfc3579369ccedabcec7ca2b0e7c6e3"},{"_id":"public/2015/01/03/linux-install-sdk-and-maven/index.html","modified":1436330118370,"shasum":"751efe9e00da0a2d1b9bd8e3e033e9222eadcdc4"},{"_id":"public/2014/12/29/agenda-start/index.html","modified":1436330118381,"shasum":"c27cc1e929fcfa6c32e35d3a424bf0c34474213e"},{"_id":"public/2014/12/29/mqtt-start/index.html","modified":1436330118389,"shasum":"84c8e54b10583dce33d96716b20cfc2c35774cf4"},{"_id":"public/2014/10/05/tip-git/index.html","modified":1436330118396,"shasum":"d543d3d0a395ee47b370866c86654aa0d9584502"},{"_id":"public/2014/10/05/tip-sublime-text-ubuntu/index.html","modified":1436330118404,"shasum":"fadd8f895d5433e00e2edde9cd474e7f91acced7"},{"_id":"public/2014/10/05/tip-linux-common-command/index.html","modified":1436330118412,"shasum":"fa5237462b24c97a05b72a43126442aae1918c5e"},{"_id":"public/2014/05/19/java-constructor-base/index.html","modified":1436330118422,"shasum":"c8ccbb05adbdf612b9aabe7de47dc48c950b1cd7"},{"_id":"public/2014/05/19/finally-lose/index.html","modified":1436330118431,"shasum":"ae2b5b3cd7b140dd9c28a2b5dde47b4727abb1da"},{"_id":"public/2014/05/19/final-finally-finalize-diff/index.html","modified":1436330118440,"shasum":"54bbdf95246887fbec24316e2b4eb602a8de05ac"},{"_id":"public/2014/05/19/sleep-wait-diff/index.html","modified":1436330118445,"shasum":"74b86fa602b855c59e3719288e7c06626457352a"},{"_id":"public/2014/05/19/String-StringBuffer-StringBuilder-diff/index.html","modified":1436330118453,"shasum":"819603a683809c8b006b101fa5d45fba68ae3d7d"},{"_id":"public/2014/05/19/HashMap-HashTable-diff/index.html","modified":1436330118464,"shasum":"8403a6770fbed445d9577f6ee15c8e5a22b8b758"},{"_id":"public/2014/05/13/maven-start/index.html","modified":1436330118479,"shasum":"dc29dd59cce9bf097b03da88ea42b6d090d08d61"},{"_id":"public/archives/index.html","modified":1436330118502,"shasum":"a8be541e90a50c554896e439e96a13e13abcad46"},{"_id":"public/archives/page/2/index.html","modified":1436330118523,"shasum":"610c5a28a6b02df9fdd3caa385ac35e839c0019a"},{"_id":"public/archives/2014/index.html","modified":1436330118546,"shasum":"7bce93e578912b86e59687624f8adbcc3fd14e52"},{"_id":"public/archives/2014/page/2/index.html","modified":1436330118553,"shasum":"a4ba4160e2cf09f528ffe1eeb00fc52f1320aa2f"},{"_id":"public/archives/2014/05/index.html","modified":1436330118578,"shasum":"d0e212fea91dcfe22cdd2c8be705bcb0dc8e75c7"},{"_id":"public/archives/2014/10/index.html","modified":1436330118586,"shasum":"6ca959e6701b98395b3f3c0d8a50fd2bbbc8e83b"},{"_id":"public/archives/2014/12/index.html","modified":1436330118598,"shasum":"35362822807f3973e3f1926c1e7551a836ae4a61"},{"_id":"public/archives/2015/index.html","modified":1436330118609,"shasum":"342cd73d797955b9774bb041c5c8873855a40ab7"},{"_id":"public/archives/2015/01/index.html","modified":1436330118617,"shasum":"d4d767cf9ded7c0dc6c79471b09a679bce0b5fd8"},{"_id":"public/archives/2015/02/index.html","modified":1436330118624,"shasum":"f921c4f020a80ff699a50d4042078c16fd569fcc"},{"_id":"public/archives/2015/07/index.html","modified":1436330118630,"shasum":"4ecc55df6eb338a430aed637b217340230b20959"},{"_id":"public/categories/tips/index.html","modified":1436330118642,"shasum":"3f86fdd3684172474360c1f635fb983edcb60e0c"},{"_id":"public/categories/java/index.html","modified":1436330118665,"shasum":"a74bdde2f9b22c236c83a1bf030c0e98c4dac476"},{"_id":"public/categories/mysql/index.html","modified":1436330118670,"shasum":"3cdde35d4fb3fc9f2bd20fbba239429f75272f3d"},{"_id":"public/categories/mqtt/index.html","modified":1436330118675,"shasum":"64bdb6f9deaef460e8a35da91ecf4e19a11667d0"},{"_id":"public/categories/linux/index.html","modified":1436330118682,"shasum":"8ec3e319218a55dd992dc11beed57528bd24e244"},{"_id":"public/categories/android/index.html","modified":1436330118687,"shasum":"f3113ff93c81939a3c21500c7a2ffba3b62088f2"},{"_id":"public/categories/nodejs/index.html","modified":1436330118692,"shasum":"852d6005b35194a416ee51f9193d806603d14a35"},{"_id":"public/index.html","modified":1436330118715,"shasum":"acd358a0884e1a0b1df560f0dad327dc27015026"},{"_id":"public/page/2/index.html","modified":1436330118731,"shasum":"4d5098b0ccf10ecf0166a71a28d5e2e45212ebd9"},{"_id":"public/tags/sublime-text/index.html","modified":1436330118736,"shasum":"25432a0c34174ee94154c2b9dde6a6f4da9630b5"},{"_id":"public/tags/linux/index.html","modified":1436330118745,"shasum":"01f0cd1d240bd9a4eb2e4a25305b5ff642ff390e"},{"_id":"public/tags/git/index.html","modified":1436330118750,"shasum":"acc5f81f089488d25bfd05ccc89bcf41e2b438d4"},{"_id":"public/tags/spring-test/index.html","modified":1436330118758,"shasum":"aaae008dc945158814ae31aacc4fc9c06c1752e7"},{"_id":"public/tags/java/index.html","modified":1436330118777,"shasum":"5e52947e179f0ccbc0316a775e168ae6564aeea7"},{"_id":"public/tags/mysql/index.html","modified":1436330118783,"shasum":"6e16a77380a426f40bc57cf330ac32131ce92416"},{"_id":"public/tags/mqtt/index.html","modified":1436330118788,"shasum":"f1ea6a5e7919b0f9108e70cbf35b693c0e9f58e4"},{"_id":"public/tags/im/index.html","modified":1436330118795,"shasum":"6b12c6b6c94bbc7c9b5065309f25173c5f7aba53"},{"_id":"public/tags/maven/index.html","modified":1436330118802,"shasum":"f48f4c7da290a4cb036df18599eb684d9d3ce943"},{"_id":"public/tags/jdk/index.html","modified":1436330118807,"shasum":"79dd90c8091ca6113ab66e1ca84352d134e86a8a"},{"_id":"public/tags/android/index.html","modified":1436330118812,"shasum":"48fc4345e935f1966f256e9a8ce7ba45c39435c2"},{"_id":"public/tags/agenda/index.html","modified":1436330118821,"shasum":"0c43b750a73fd628a8f38a6b54b7a61884b3b1e1"}],"Category":[{"name":"tips","_id":"cibu9v6w60001jgx4bbwvbuuh"},{"name":"java","_id":"cibu9v6x1000ejgx4uapqs4kr"},{"name":"mysql","_id":"cibu9v6x7000njgx4dvsaykzm"},{"name":"mqtt","_id":"cibu9v6xa000sjgx4nkwea6z6"},{"name":"linux","_id":"cibu9v6xg0013jgx4gy8ez9qa"},{"name":"android","_id":"cibu9v6xs001jjgx4oghzrlvx"},{"name":"nodejs","_id":"cibu9v6xw001ojgx47gok4ybr"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Ubuntu快速安装Sublime-Text","date":"2014-10-04T16:00:00.000Z","_content":"\n\n### 通过添加PPA安装\n```\nsudo add-apt-repository ppa:webupd8team/sublime-text-2\nsudo apt-get update\nsudo apt-get install sublime-text-2\n```\n\n<!-- more -->\n\n### 安装Soda主题\n安装 Package Control, 按 `Ctrl+~`进入控制台，粘贴以下代码\n> import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'\n\npreferences -> package control -> 输入install package\n在此打开控制台，输入Soda，选择 Theme-Soda\nPreferences -> Settings – User中修改参数\n```\n{\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    \"theme\": \"Soda Dark.sublime-theme\",\n    \"font_size\": 12,\n    \"font_face\": \"YaHei Consolas Hybrid\"\n}\n```\n重启Sublime Text\n\n\n","source":"_posts/tip-sublime-text-ubuntu.md","raw":"---\nlayout: post\ntitle: \"Ubuntu快速安装Sublime-Text\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- sublime-text\n---\n\n\n### 通过添加PPA安装\n```\nsudo add-apt-repository ppa:webupd8team/sublime-text-2\nsudo apt-get update\nsudo apt-get install sublime-text-2\n```\n\n<!-- more -->\n\n### 安装Soda主题\n安装 Package Control, 按 `Ctrl+~`进入控制台，粘贴以下代码\n> import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'\n\npreferences -> package control -> 输入install package\n在此打开控制台，输入Soda，选择 Theme-Soda\nPreferences -> Settings – User中修改参数\n```\n{\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    \"theme\": \"Soda Dark.sublime-theme\",\n    \"font_size\": 12,\n    \"font_face\": \"YaHei Consolas Hybrid\"\n}\n```\n重启Sublime Text\n\n\n","slug":"tip-sublime-text-ubuntu","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6w10000jgx47dtr3u92"},{"layout":"post","title":"Linux常用命令","date":"2014-10-04T16:00:00.000Z","_content":"\n\n**安装右键从终端启动**\n> sudo apt-get install nautilus-open-terminal\n\n**复制文件到远程目录**\n> scp filename  xiezf@192.168.248.124:/home/push\n\n<!-- more -->\n\n**如果是复制文件夹，使用**\n> scp -r filename  xiezf@192.168.248.124:/home/push\n\n**清理dns cache**\n> sudo /etc/init.d/dns-clean start \n\n**查看域名解析**\n> nslookup  api.jpush.cn","source":"_posts/tip-linux-common-command.md","raw":"---\nlayout: post\ntitle: \"Linux常用命令\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- linux \n---\n\n\n**安装右键从终端启动**\n> sudo apt-get install nautilus-open-terminal\n\n**复制文件到远程目录**\n> scp filename  xiezf@192.168.248.124:/home/push\n\n<!-- more -->\n\n**如果是复制文件夹，使用**\n> scp -r filename  xiezf@192.168.248.124:/home/push\n\n**清理dns cache**\n> sudo /etc/init.d/dns-clean start \n\n**查看域名解析**\n> nslookup  api.jpush.cn","slug":"tip-linux-common-command","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6wu0005jgx4v0b7gwxz"},{"layout":"post","title":"Git常用命令集","date":"2014-10-04T16:00:00.000Z","_content":"\n\n<!-- more -->\n\n**生成SSH Key**\n> ssh-keygen -t rsa -C \"committer_email@committermail.com\"  \n\n**查看自己拥有的权限**\n> ssh -lgit <git host>\n> exp: ssh -lgit git.jpushoa.com\n\n<!-- more -->\n\n**添加并提交到本地库**\n> git commit -m 'your comment'\n\n**将本地仓库添加到远程库**\n> git remote add origin <your git.git>\n\n**分支**\n> git branch -r    #查看所有分支\n> git branch [branch_name] #创建新分支\n> git checkout [branch_name] #切换到分支\n> git push origin branch_name #上传分支到远程服务器\n> git branch --set-upstream master origin/master #将本地分支链接到远程分支\n\n**Tag**\n> git tag #显示标签\n> git tag -a v3.1.1 -m 'version 3.1.1'    ＃添加标签\n> git push origin v3.1.1 ＃推送到云端\n> git tag -d v3.1.1 # 删除标签\n> git push origin :refs/tags/v3.1.1 # 将删除操作更新到远程git库\n","source":"_posts/tip-git.md","raw":"---\nlayout: post\ntitle: \"Git常用命令集\"\ndate: 2014-10-05\ncategories:\n- tips\ntags:\n- git\n---\n\n\n<!-- more -->\n\n**生成SSH Key**\n> ssh-keygen -t rsa -C \"committer_email@committermail.com\"  \n\n**查看自己拥有的权限**\n> ssh -lgit <git host>\n> exp: ssh -lgit git.jpushoa.com\n\n<!-- more -->\n\n**添加并提交到本地库**\n> git commit -m 'your comment'\n\n**将本地仓库添加到远程库**\n> git remote add origin <your git.git>\n\n**分支**\n> git branch -r    #查看所有分支\n> git branch [branch_name] #创建新分支\n> git checkout [branch_name] #切换到分支\n> git push origin branch_name #上传分支到远程服务器\n> git branch --set-upstream master origin/master #将本地分支链接到远程分支\n\n**Tag**\n> git tag #显示标签\n> git tag -a v3.1.1 -m 'version 3.1.1'    ＃添加标签\n> git push origin v3.1.1 ＃推送到云端\n> git tag -d v3.1.1 # 删除标签\n> git push origin :refs/tags/v3.1.1 # 将删除操作更新到远程git库\n","slug":"tip-git","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6wx0009jgx4tnxe6kx4"},{"layout":"post","title":"使用Spring Test编写单元测试","date":"2015-01-05T16:00:00.000Z","description":"用Spring Test的话, 可以指定在测试用例执行完毕后,对数据库进行回滚操作","_content":"\n在编写单元测试的时候,特别是涉及数据存储的单元测试环境中,我们需要保证测试环境的整洁,避免测试数据污染正常使用的数据库.  \n通常的做法是, 创建一个测试数据库, 使用配置文件控制在测试环境下, 数据持久化到测试环境. 这种方法比较笨拙.  \n如果使用Spring Test的话, 就可以指定在测试用例执行完毕后,对数据库进行回滚操作.\n\n<!-- more -->\n\n### 依赖管理\n#### JUnit\n```\n<!-- junit -->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n</dependency>\n```\n#### Spring Test\n```\n<!-- spring test -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>4.1.2.RELEASE</version>\n    <scope>test</scope>\n</dependency>\n```\n\n### 测试用例编写\n在未使用Spring Test之前, 我们可以用`ApplicationContext`获取实例, 但该方法不够便捷, 每个单元测试类都需要编写一套初始化代码.\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\nMessageDao messageDao = applicationContext.getBean(\"messageDao\");\n```\n\n在此可以使用Spring Test, 以期使用注解注入需要使用到的实例. 如下:\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class MessageDaoTest {\n    @Resource\n    private MessageDao messageDao;\n}\n```\n\n在此, 单元测试类可以选择继承自`AbstractJUnit4SpringContextTests`或`AbstractTransactionalJUnit4SpringContextTests`. 关于上述两者的区别:\n> 如果再你的测试类中，需要用到事务管理（比如要在测试结果出来之后回滚测试内容），就可以使用AbstractTransactionalJUnit4SpringTests类。事务管理的使用方法和正常使用Spring事务管理是一样的。再此需要注意的是，如果想要使用声明式事务管理，即使用AbstractTransactionalJUnitSpringContextTests类，请在applicationContext.xml文件中加入transactionManager bean\n摘至: [Spring Test 整合 JUnit 4 使用总结][1]\n\n在继承 `AbstractTransactionalJUnit4SpringContextTests` 后, 测试用例执行完成后, 所有涉及的数据库操作都会被回滚,十分方便. 不用再测试完成后再做清理现场的操作.\n\n在编写测试用例的时候, 一些注解的说明\n```\n@BeforeClass\npublic void static beforeClass() {// 做一些测试前置数据的创建工作, 只执行一次}\n@Before\npublic void before() {// 做一些测试前置数据的创建工作, 他对于每一个测试方法都回执行一次}\n@AfterClass\npublic void static afterClass() {//做一些清理现场,释放资源的操作, 只执行一次 }\n@After\npublic void after() { //做一些清理现场,释放资源的操作, 他对于每一个测试方法都回执行一次}\n```\n\n### 后记\n对于使用Spring Test做单元测试并不是十全十美, 因为有一些存储操作, 我们并不希望交由Spring管理,  例如项目中使用redis做一些缓存操作, 在使用单元测试后, 必须删除对应的缓存数据, 这时候只能手动清理现场.\n(虽然使用Spring-data-redis能交由spring管理事物, 但考虑到其他需求, 没有引入)\n\n### 参考资料\n[Spring Test 整合 JUnit 4 使用总结][1]\n\n  [1]: http://blog.csdn.net/feihong247/article/details/7828143","source":"_posts/spring-test-start.md","raw":"---\nlayout: post\ntitle: \"使用Spring Test编写单元测试\"\ndate: 2015-01-06\ncategories: \n- java\ntags: \n- spring-test\ndescription: \"用Spring Test的话, 可以指定在测试用例执行完毕后,对数据库进行回滚操作\"\n\n---\n\n在编写单元测试的时候,特别是涉及数据存储的单元测试环境中,我们需要保证测试环境的整洁,避免测试数据污染正常使用的数据库.  \n通常的做法是, 创建一个测试数据库, 使用配置文件控制在测试环境下, 数据持久化到测试环境. 这种方法比较笨拙.  \n如果使用Spring Test的话, 就可以指定在测试用例执行完毕后,对数据库进行回滚操作.\n\n<!-- more -->\n\n### 依赖管理\n#### JUnit\n```\n<!-- junit -->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n    <scope>test</scope>\n</dependency>\n```\n#### Spring Test\n```\n<!-- spring test -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-test</artifactId>\n    <version>4.1.2.RELEASE</version>\n    <scope>test</scope>\n</dependency>\n```\n\n### 测试用例编写\n在未使用Spring Test之前, 我们可以用`ApplicationContext`获取实例, 但该方法不够便捷, 每个单元测试类都需要编写一套初始化代码.\n```\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\nMessageDao messageDao = applicationContext.getBean(\"messageDao\");\n```\n\n在此可以使用Spring Test, 以期使用注解注入需要使用到的实例. 如下:\n```\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class MessageDaoTest {\n    @Resource\n    private MessageDao messageDao;\n}\n```\n\n在此, 单元测试类可以选择继承自`AbstractJUnit4SpringContextTests`或`AbstractTransactionalJUnit4SpringContextTests`. 关于上述两者的区别:\n> 如果再你的测试类中，需要用到事务管理（比如要在测试结果出来之后回滚测试内容），就可以使用AbstractTransactionalJUnit4SpringTests类。事务管理的使用方法和正常使用Spring事务管理是一样的。再此需要注意的是，如果想要使用声明式事务管理，即使用AbstractTransactionalJUnitSpringContextTests类，请在applicationContext.xml文件中加入transactionManager bean\n摘至: [Spring Test 整合 JUnit 4 使用总结][1]\n\n在继承 `AbstractTransactionalJUnit4SpringContextTests` 后, 测试用例执行完成后, 所有涉及的数据库操作都会被回滚,十分方便. 不用再测试完成后再做清理现场的操作.\n\n在编写测试用例的时候, 一些注解的说明\n```\n@BeforeClass\npublic void static beforeClass() {// 做一些测试前置数据的创建工作, 只执行一次}\n@Before\npublic void before() {// 做一些测试前置数据的创建工作, 他对于每一个测试方法都回执行一次}\n@AfterClass\npublic void static afterClass() {//做一些清理现场,释放资源的操作, 只执行一次 }\n@After\npublic void after() { //做一些清理现场,释放资源的操作, 他对于每一个测试方法都回执行一次}\n```\n\n### 后记\n对于使用Spring Test做单元测试并不是十全十美, 因为有一些存储操作, 我们并不希望交由Spring管理,  例如项目中使用redis做一些缓存操作, 在使用单元测试后, 必须删除对应的缓存数据, 这时候只能手动清理现场.\n(虽然使用Spring-data-redis能交由spring管理事物, 但考虑到其他需求, 没有引入)\n\n### 参考资料\n[Spring Test 整合 JUnit 4 使用总结][1]\n\n  [1]: http://blog.csdn.net/feihong247/article/details/7828143","slug":"spring-test-start","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6x0000djgx4thiqwi0m"},{"layout":"post","title":"sleep(), wait()的区别","date":"2014-05-18T16:00:00.000Z","_content":"\n\n### sleep(), wait()的区别\n\n#### sleep(milliseconds)\n接收一个参数，使当前线程休眠一段时间。用户线程控制。\n特点：  \n\n* 不释放同步锁。\n\n<!-- more -->\n\n#### wait()\n调用wait()方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify()方法后，才会重新激活调用者。\n特定：  \n\n* 释放同步锁\n\n#### 总结\n其实两者都可以让线程暂停一段时间,但是本质的区别是一个线程的运行状态控制,一个是线程之间的通讯的问题\n\n\n","source":"_posts/sleep-wait-diff.md","raw":"---\nlayout: post\ntitle: \"sleep(), wait()的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\n\n---\n\n\n### sleep(), wait()的区别\n\n#### sleep(milliseconds)\n接收一个参数，使当前线程休眠一段时间。用户线程控制。\n特点：  \n\n* 不释放同步锁。\n\n<!-- more -->\n\n#### wait()\n调用wait()方法将会将调用者的线程挂起，直到其他线程调用同一个对象的notify()方法后，才会重新激活调用者。\n特定：  \n\n* 释放同步锁\n\n#### 总结\n其实两者都可以让线程暂停一段时间,但是本质的区别是一个线程的运行状态控制,一个是线程之间的通讯的问题\n\n\n","slug":"sleep-wait-diff","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6x3000ijgx4tlvyhly4"},{"layout":"post","title":"MySQL解决插入emoji表情失败的问题","date":"2015-02-02T16:00:00.000Z","_content":"\n\n\n\n一直以为UTF-8是万能的字符集问题解决方案. 直到遇到这个问题.\n最近在做新浪微博的爬虫, 在存库的时候, 发现只要保持emoji表情, 就回抛出以下异常\n```\nIncorrect string value: '\\xF0\\x90\\x8D\\x83\\xF0\\x90...' \n```\n众所周知UTF-8是3个字节,  其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 所以便有了utf8mb4, utf8mb4是utf8的超集, 占4个字节, 向下兼容utf8. 我们日常用的emoji表情就是4个字节了.\n所以在此我们像utf8的数据表插入数据就会报出`Incorrect string value`这个错误.\n\n\n<!-- more -->\n\nGoogle一下很容易就找到了解决方案, 具体解决办法是:\n\n- 1.修改数据表的字符集为utf8mb4\n> 这点很简单, 修改语句网上找一大堆, 不过建议重新建表, 使用 `mysqldump -uusername -ppassword database_name table_name > table.sql` 备份相应数据表, 并修改其中的建表语句的字符集为 utf8mb4 即可, 然后 `mysql -uusername -ppassword database_name < table.sql` 重新导入sql即可完成修改字符集操作.\n\n- 2.MySQL数据库版本要5.5.3及以上\n\n    > 网络上所有的文章都说明要MySQL 5.5.3以上的版本才支持utf8mb4, 不过我使用的数据库版本为5.5.18, 最终仍能解决问题, 所以同学们不要急着找运维哥哥升级数据库先, 先试试能不能自己解决问题.\n\n- 3.修改数据库配置文件`/etc/my.cnf`并重启mysql服务\n    > 主要是修改数据库的默认字符集, 以及连接, 查询的字符集, [Mysql支持emoji 表情符号 升级编码为UTF8MB4][1]  这篇文章有详细的设置方法,  [深入Mysql字符集设置][2] 这篇文章有其中设置的各个字符集的作用, 大家可以科普下.\n\n- 4.升级MySQL Connector到5.1.21及以上\n\n以上所有的操作, 最关键的是步骤3, 修改数据库的配置文件, 其中大概修改了\n```\n[client]\n# 客户端来源数据的默认字符集\ndefault-character-set = utf8mb4\n\n[mysqld]\n# 服务端默认字符集\ncharacter-set-server=utf8mb4\n# 连接层默认字符集\ncollation-server=utf8mb4_unicode_ci\n\n[mysql]\n# 数据库默认字符集\ndefault-character-set = utf8mb4\n```\n这些配置指定了数据从客户端到服务端所经过的一条条管道使用的字符集, 其中每一个管道出现问题都可能会导致插入失败或者乱码.\n\n但很多时候, 线上的数据库是不能随便修改数据库文件的, 所以我们的运维同学很果断的回绝了我修改数据库配置文件的请求(T_T)  \n\n所以就只能用代码解决了, 一开始是准备从JDBC连接时候就指定使用的字符集处下手.\n```\njdbc:mysql://localhost:3306/ding?characterEncoding=UTF-8\n```\n主要把UTF-8修改为utf8mb4对于的Java Style Charset字符串应该就能解决问题吧? \n不过很遗憾的是, Java JDBC并不存在utf8mb4对于的字符集. 使用UTF-8的时候可以兼容urf8mb4并自动转换字符集.\n\n> For example, to use 4-byte UTF-8 character sets with Connector/J, configure the MySQL server with character_set_server=utf8mb4, and leave characterEncoding out of the Connector/J connection string. Connector/J will then autodetect the UTF-8 setting.  -- [MySQL:Using Character Sets and Unicode][3]\n\n后来科普了一下, 在每一次查询请求的时候, 可以显式的指定使用的字符集, 使用 `set names utf8mb4` 可以指定本次链接的字符集为utf8mb4, 但这个设置在每次连接被释放后都会失效. \n目前的解决办法是, 在需要插入utf8mb4的时候, 显示地调用执行`set names utf8mb4`, 如:\n```\njdbcTemplate.execute(\"set names utf8mb4\");\njdbcTempalte.execute(\"...\");\n```\n需要注意的是, 我们在使用一下ORM框架的时候, 因为性能优化原因, 框架会延迟提交, 除非事务结束或者用户主动调用强制提交, 负责执行的`set names utf8mb4`仍然不会生效. \n\n在这里我使用的是myBatis, 以MessageDao为例\n\n```\n// MessageDao\npublic interface MessageDao {\n    @Update(\"set names utf8mb4\")\n    public void setCharsetToUtf8mb4();\n    @Insert(\"insert into tb_message ......\")\n    public void insert(Message msg);\n}\n\n// test code\n\nSqlSession sqlSession = sqlSessioFactory.openSession();\nmessageDao = sqlSession.getMapper(MessageDao.class);\nmessageDao.setCharsetToUtf8mb4();\n// 强制提交\nsqlSession.commit();\nmessageDao.insert(message);\n\n```\n至此, 问题便解决了..\n哎, 如果世事能那么顺利就好了, 在项目中, mybatis是实例是交由Spring去管理的, 也就是说我拿不到sqlSession, 也就是强制提交不了. 并且因为Spring事务框架的限制, 他并不允许用户显式调用强制提交.  目前还在纠结这个问题.\n有两个解决思路:\n1. 使用AOP, 在可能插入4字节UTF8字符的时候, 前置方法执行`set names utf8mb4`, 但该方案还不能确定AOP的方法会被Spring进行事务管理么, 并且在前置方法中,拿到的链接是否和接下来拿到的连接对象是同一个session.\n2. 研究Spring JDBC的创建方法, 写一个hook在每次创建新的数据库连接的时候, 都执行一次`set names utf8mb4`, 这样就保证每一次拿到的链接都是设置过字符集的.\n\n待有时间再实验一下以上两种方案.\n","source":"_posts/mysql-utf8mb4.md","raw":"---\nlayout: post\ntitle: \"MySQL解决插入emoji表情失败的问题\"\ndate: 2015-02-03\ncategories:\n- mysql\ntags:\n- mysql\n\n---\n\n\n\n\n一直以为UTF-8是万能的字符集问题解决方案. 直到遇到这个问题.\n最近在做新浪微博的爬虫, 在存库的时候, 发现只要保持emoji表情, 就回抛出以下异常\n```\nIncorrect string value: '\\xF0\\x90\\x8D\\x83\\xF0\\x90...' \n```\n众所周知UTF-8是3个字节,  其中已经包括我们日常能见过的绝大多数字体. 但3个字节远远不够容纳所有的文字, 所以便有了utf8mb4, utf8mb4是utf8的超集, 占4个字节, 向下兼容utf8. 我们日常用的emoji表情就是4个字节了.\n所以在此我们像utf8的数据表插入数据就会报出`Incorrect string value`这个错误.\n\n\n<!-- more -->\n\nGoogle一下很容易就找到了解决方案, 具体解决办法是:\n\n- 1.修改数据表的字符集为utf8mb4\n> 这点很简单, 修改语句网上找一大堆, 不过建议重新建表, 使用 `mysqldump -uusername -ppassword database_name table_name > table.sql` 备份相应数据表, 并修改其中的建表语句的字符集为 utf8mb4 即可, 然后 `mysql -uusername -ppassword database_name < table.sql` 重新导入sql即可完成修改字符集操作.\n\n- 2.MySQL数据库版本要5.5.3及以上\n\n    > 网络上所有的文章都说明要MySQL 5.5.3以上的版本才支持utf8mb4, 不过我使用的数据库版本为5.5.18, 最终仍能解决问题, 所以同学们不要急着找运维哥哥升级数据库先, 先试试能不能自己解决问题.\n\n- 3.修改数据库配置文件`/etc/my.cnf`并重启mysql服务\n    > 主要是修改数据库的默认字符集, 以及连接, 查询的字符集, [Mysql支持emoji 表情符号 升级编码为UTF8MB4][1]  这篇文章有详细的设置方法,  [深入Mysql字符集设置][2] 这篇文章有其中设置的各个字符集的作用, 大家可以科普下.\n\n- 4.升级MySQL Connector到5.1.21及以上\n\n以上所有的操作, 最关键的是步骤3, 修改数据库的配置文件, 其中大概修改了\n```\n[client]\n# 客户端来源数据的默认字符集\ndefault-character-set = utf8mb4\n\n[mysqld]\n# 服务端默认字符集\ncharacter-set-server=utf8mb4\n# 连接层默认字符集\ncollation-server=utf8mb4_unicode_ci\n\n[mysql]\n# 数据库默认字符集\ndefault-character-set = utf8mb4\n```\n这些配置指定了数据从客户端到服务端所经过的一条条管道使用的字符集, 其中每一个管道出现问题都可能会导致插入失败或者乱码.\n\n但很多时候, 线上的数据库是不能随便修改数据库文件的, 所以我们的运维同学很果断的回绝了我修改数据库配置文件的请求(T_T)  \n\n所以就只能用代码解决了, 一开始是准备从JDBC连接时候就指定使用的字符集处下手.\n```\njdbc:mysql://localhost:3306/ding?characterEncoding=UTF-8\n```\n主要把UTF-8修改为utf8mb4对于的Java Style Charset字符串应该就能解决问题吧? \n不过很遗憾的是, Java JDBC并不存在utf8mb4对于的字符集. 使用UTF-8的时候可以兼容urf8mb4并自动转换字符集.\n\n> For example, to use 4-byte UTF-8 character sets with Connector/J, configure the MySQL server with character_set_server=utf8mb4, and leave characterEncoding out of the Connector/J connection string. Connector/J will then autodetect the UTF-8 setting.  -- [MySQL:Using Character Sets and Unicode][3]\n\n后来科普了一下, 在每一次查询请求的时候, 可以显式的指定使用的字符集, 使用 `set names utf8mb4` 可以指定本次链接的字符集为utf8mb4, 但这个设置在每次连接被释放后都会失效. \n目前的解决办法是, 在需要插入utf8mb4的时候, 显示地调用执行`set names utf8mb4`, 如:\n```\njdbcTemplate.execute(\"set names utf8mb4\");\njdbcTempalte.execute(\"...\");\n```\n需要注意的是, 我们在使用一下ORM框架的时候, 因为性能优化原因, 框架会延迟提交, 除非事务结束或者用户主动调用强制提交, 负责执行的`set names utf8mb4`仍然不会生效. \n\n在这里我使用的是myBatis, 以MessageDao为例\n\n```\n// MessageDao\npublic interface MessageDao {\n    @Update(\"set names utf8mb4\")\n    public void setCharsetToUtf8mb4();\n    @Insert(\"insert into tb_message ......\")\n    public void insert(Message msg);\n}\n\n// test code\n\nSqlSession sqlSession = sqlSessioFactory.openSession();\nmessageDao = sqlSession.getMapper(MessageDao.class);\nmessageDao.setCharsetToUtf8mb4();\n// 强制提交\nsqlSession.commit();\nmessageDao.insert(message);\n\n```\n至此, 问题便解决了..\n哎, 如果世事能那么顺利就好了, 在项目中, mybatis是实例是交由Spring去管理的, 也就是说我拿不到sqlSession, 也就是强制提交不了. 并且因为Spring事务框架的限制, 他并不允许用户显式调用强制提交.  目前还在纠结这个问题.\n有两个解决思路:\n1. 使用AOP, 在可能插入4字节UTF8字符的时候, 前置方法执行`set names utf8mb4`, 但该方案还不能确定AOP的方法会被Spring进行事务管理么, 并且在前置方法中,拿到的链接是否和接下来拿到的连接对象是同一个session.\n2. 研究Spring JDBC的创建方法, 写一个hook在每次创建新的数据库连接的时候, 都执行一次`set names utf8mb4`, 这样就保证每一次拿到的链接都是设置过字符集的.\n\n待有时间再实验一下以上两种方案.\n","slug":"mysql-utf8mb4","published":1,"updated":"2015-07-08T04:28:07.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6x6000mjgx4ymjtvoov"},{"layout":"post","title":"MQTT 基础知识","date":"2014-12-28T16:00:00.000Z","_content":"\nMQTT是IBM开发的一个即时通讯协议， 广泛运用在移动互联网实时推送以及相关扩展应用上，本文只要简述MQTT协议的部分知识点。\n\n<!-- more -->\n\n### 基础内容\n\nMQTT的固定头部包含以下信息\n\n#### MessageType\n消息类型，使用4位二进制标示，共16种消息类型，其中0和15位做保留待用，实际使用共14种消息事件类型\n\n#### DUP flag \n默认为0，标示该消息为第一次发送，当该值为一时，标示消息先前已经被传输过了，该位前置条件为Qos > 0，标示消息需要回复确认\n\n#### QoS level\n服务质量，由两个二进制位标示\n*　0：至多一次\n*　1：至少一次\n*　2：只有一次\n*　3：保留\n\n#### RETAIN\n是否对PUBLISH消息进行持久化\n* 1：标示需要持久化， 当新订阅者出现时，会收到最新一个持久化消息\n* 2：标示不需要持久化，推送仅对当前订阅者\n**当RETAIN=1，Payload=NULL时标示删除该Topic的持久化PUBLISH消息**\n\n### Topic通配符\n> /：用来表示层次，比如a/b，a/b/c。\n> \\#：表示匹配>=0个层次，比如a/#就匹配a/，a/b，a/b/c。\n> 单独的一个#表示匹配所有。\n> 不允许 a#和a/#/c。\n> +：表示匹配一个层次，例如a/+匹配a/b，a/c，不匹配a/b/c。\n> 单独的一个+是允许的，a+不允许，a/+/b不允许\n\n### 心跳 PINGREQ/PINGRES\nClient告知Server其心跳间隔KeepAliveTime，Client需要在该时长内发送PINGREQ，Server收到后返回PINGRES确认以保持Client与Server的长链接。\nServer在1.5个时长内未收到PINGREQ，就断开连接\nClient在1个时长内未收到Server的PINGRES，就断开连接\n时间最长为18hours，0标示不断开\n\n### Clean Session\n服务端是否保存Client的订阅信息\n* true:保存\n* false:不保持\n\n### 字段建议长度\n* clientId 客户端->服务端, 服务端->客户端的单向唯一标示,length<=23\n* username 用户名,用于身份验证, length<=12\n* password 用户密码,用户身份验证, length<=12\n\n\n### 遗嘱消息 WillMessage\n遗嘱消息标示客户端网络异常导致连接中断后, 服务器将发布该遗嘱消息\n遗嘱消息包含以下信息:\n* Will Flag:是否定义遗嘱消息，Will Flag=1是标示指定遗嘱消息，否则将直接忽略Will Qos，Will RETAIN的值\n* Will Qos:遗嘱消息的通讯质量\n* Will RETAIN:遗嘱消息是否持久化\n* Will Topic:遗嘱消息主题\n* Will Message:遗嘱消息Payload\n\n### 建立连接CONNECT的响应机制\n* 客户端绕过CONNECT消息直接发送其它类型消息，服务器应关闭此非法连接\n* 客户端发送CONNECT之后未收到CONNACT，需要关闭当前连接，然后重新连接\n* 相同Client ID客户端已连接到服务器，先前客户端必须断开连接后，服务器才能完成新的客户端CONNECT连接\n* 客户端发送无效非法CONNECT消息，服务器需要关闭\n\n\n\n### 参考资料\n\n* [MQTT协议简记][1]\n* [MQTT协议笔记之头部信息][2]\n* [MQTT协议笔记之连接和心跳][3]\n\n\n  [1]: http://www.cnblogs.com/caca/p/mqtt.html\n  [2]: http://www.blogjava.net/yongboy/archive/2014/02/07/409587.html\n  [3]: http://www.blogjava.net/yongboy/archive/2014/02/09/409630.html","source":"_posts/mqtt-start.md","raw":"---\nlayout: post\ntitle: \"MQTT 基础知识\"\ndate: 2014-12-29\ncategories:\n- mqtt\ntags:\n- mqtt \n- im\n\n---\n\nMQTT是IBM开发的一个即时通讯协议， 广泛运用在移动互联网实时推送以及相关扩展应用上，本文只要简述MQTT协议的部分知识点。\n\n<!-- more -->\n\n### 基础内容\n\nMQTT的固定头部包含以下信息\n\n#### MessageType\n消息类型，使用4位二进制标示，共16种消息类型，其中0和15位做保留待用，实际使用共14种消息事件类型\n\n#### DUP flag \n默认为0，标示该消息为第一次发送，当该值为一时，标示消息先前已经被传输过了，该位前置条件为Qos > 0，标示消息需要回复确认\n\n#### QoS level\n服务质量，由两个二进制位标示\n*　0：至多一次\n*　1：至少一次\n*　2：只有一次\n*　3：保留\n\n#### RETAIN\n是否对PUBLISH消息进行持久化\n* 1：标示需要持久化， 当新订阅者出现时，会收到最新一个持久化消息\n* 2：标示不需要持久化，推送仅对当前订阅者\n**当RETAIN=1，Payload=NULL时标示删除该Topic的持久化PUBLISH消息**\n\n### Topic通配符\n> /：用来表示层次，比如a/b，a/b/c。\n> \\#：表示匹配>=0个层次，比如a/#就匹配a/，a/b，a/b/c。\n> 单独的一个#表示匹配所有。\n> 不允许 a#和a/#/c。\n> +：表示匹配一个层次，例如a/+匹配a/b，a/c，不匹配a/b/c。\n> 单独的一个+是允许的，a+不允许，a/+/b不允许\n\n### 心跳 PINGREQ/PINGRES\nClient告知Server其心跳间隔KeepAliveTime，Client需要在该时长内发送PINGREQ，Server收到后返回PINGRES确认以保持Client与Server的长链接。\nServer在1.5个时长内未收到PINGREQ，就断开连接\nClient在1个时长内未收到Server的PINGRES，就断开连接\n时间最长为18hours，0标示不断开\n\n### Clean Session\n服务端是否保存Client的订阅信息\n* true:保存\n* false:不保持\n\n### 字段建议长度\n* clientId 客户端->服务端, 服务端->客户端的单向唯一标示,length<=23\n* username 用户名,用于身份验证, length<=12\n* password 用户密码,用户身份验证, length<=12\n\n\n### 遗嘱消息 WillMessage\n遗嘱消息标示客户端网络异常导致连接中断后, 服务器将发布该遗嘱消息\n遗嘱消息包含以下信息:\n* Will Flag:是否定义遗嘱消息，Will Flag=1是标示指定遗嘱消息，否则将直接忽略Will Qos，Will RETAIN的值\n* Will Qos:遗嘱消息的通讯质量\n* Will RETAIN:遗嘱消息是否持久化\n* Will Topic:遗嘱消息主题\n* Will Message:遗嘱消息Payload\n\n### 建立连接CONNECT的响应机制\n* 客户端绕过CONNECT消息直接发送其它类型消息，服务器应关闭此非法连接\n* 客户端发送CONNECT之后未收到CONNACT，需要关闭当前连接，然后重新连接\n* 相同Client ID客户端已连接到服务器，先前客户端必须断开连接后，服务器才能完成新的客户端CONNECT连接\n* 客户端发送无效非法CONNECT消息，服务器需要关闭\n\n\n\n### 参考资料\n\n* [MQTT协议简记][1]\n* [MQTT协议笔记之头部信息][2]\n* [MQTT协议笔记之连接和心跳][3]\n\n\n  [1]: http://www.cnblogs.com/caca/p/mqtt.html\n  [2]: http://www.blogjava.net/yongboy/archive/2014/02/07/409587.html\n  [3]: http://www.blogjava.net/yongboy/archive/2014/02/09/409630.html","slug":"mqtt-start","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6x9000rjgx40mgvrbs0"},{"layout":"post","title":"maven入门","date":"2014-05-12T16:00:00.000Z","_content":"\nMaven简单入门， 快速入手\n\n<!-- more -->\n\n## 下载\n    http://maven.apache.org/download.html\n\n## 配置\n    MAVEN_HOME : D:\\apache-maven-3.0.2  \n    MAVEN : %MAVEN_HOME%\\bin   \n    (可选） MAVEN_OPTS : -Xms256m -Xmx512m\n    PATH: 添加 %MAVEN%\n\n## 开始\n### 验证安装成功\n    mvn -version\n\n正常应该显示  \n\n    Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;2014-02-15T01:37:52+08:00)\n    Maven home: D:\\apache-maven-3.2.1\\bin\\..\n    Java version: 1.7.0_09, vendor: Oracle Corporation\n    Java home: C:\\Program Files\\Java\\jdk1.7.0_09\\jre\n    Default locale: zh_CN, platform encoding: GBK\n    OS name: \"windows 8\", version: \"6.2\", arch: \"amd64\", family: \"windows\"\n\n### 创建项目\n\n    #此命令创建一个默认项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=my-app\n    #此命令创建一个web项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=webappp -DarchetypeArtifactId=maven-archetype-webapp\n\n创建一个默认项目，项目名为my-app，项目包结构为com.xiezefan.app  \n\n* DgroupId 项目包结构\n* DartifactId 项目名\n* DarchetypeArtifactId 项目类型（maven-archetype-webapp是web项目，打包后生成war包）\n\n### 常用命令\n\n    mvn package  #打包项目，感觉pox.xml的packaging确定打包成jar or war","source":"_posts/maven-start.md","raw":"---\nlayout: post\ntitle: \"maven入门\"\ndate: 2014-05-13\ncategories:\n- java\ntags:\n- maven\n\n---\n\nMaven简单入门， 快速入手\n\n<!-- more -->\n\n## 下载\n    http://maven.apache.org/download.html\n\n## 配置\n    MAVEN_HOME : D:\\apache-maven-3.0.2  \n    MAVEN : %MAVEN_HOME%\\bin   \n    (可选） MAVEN_OPTS : -Xms256m -Xmx512m\n    PATH: 添加 %MAVEN%\n\n## 开始\n### 验证安装成功\n    mvn -version\n\n正常应该显示  \n\n    Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;2014-02-15T01:37:52+08:00)\n    Maven home: D:\\apache-maven-3.2.1\\bin\\..\n    Java version: 1.7.0_09, vendor: Oracle Corporation\n    Java home: C:\\Program Files\\Java\\jdk1.7.0_09\\jre\n    Default locale: zh_CN, platform encoding: GBK\n    OS name: \"windows 8\", version: \"6.2\", arch: \"amd64\", family: \"windows\"\n\n### 创建项目\n\n    #此命令创建一个默认项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=my-app\n    #此命令创建一个web项目\n    mvn archetype:create -DgroupId=com.xiezefan.app -DartifactId=webappp -DarchetypeArtifactId=maven-archetype-webapp\n\n创建一个默认项目，项目名为my-app，项目包结构为com.xiezefan.app  \n\n* DgroupId 项目包结构\n* DartifactId 项目名\n* DarchetypeArtifactId 项目类型（maven-archetype-webapp是web项目，打包后生成war包）\n\n### 常用命令\n\n    mvn package  #打包项目，感觉pox.xml的packaging确定打包成jar or war","slug":"maven-start","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xd000yjgx4z6docqhb"},{"layout":"post","title":"Linux系统安装配置JDK与Maven","date":"2015-01-02T16:00:00.000Z","description":"Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。","_content":"\nLinux 系统下快速按安装配置JDK与Maven的多种方法及利弊。\n\n<!-- more -->\n\n### 下载\n\n> Java  \n> http://www.oracle.com/technetwork/java/javase/downloads/index.html  \n> Maven  \n> http://maven.apache.org/download.cgi\n\n### 配置\n\n修改 `/etc/profile` 文件\n#### Java\n```\nJAVA_HOME=/usr/share/jdk1.5.0_05 \nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \nexport JAVA_HOME \nexport PATH \nexport CLASSPATH\n```\n#### Maven\n\n```\nMAVEN_HOME=~/apache-maven-3.2.3\nexport MAVEN_HOME\n```\n\n#### 即刻生效修改\n```\nsource /etc/profile\n```\n\n\n### 其他配置方法\n\n上述方法是通过修改/etc/profile文件，但这个修改是全局的，所以，基于安全考虑，当只需要给某个用户权限使用这个环境变量的时候，只需修改该用户目录下的.bashrc文件并重启系统即可。\n当然也可以直接在sheel中设置，不过此方法设置后，在关闭了sheel后就会失效， 看需求使用\n\n```\n# 在sheel中导入JDK配置\nexport JAVA_HOME=/usr/share/jdk1.5.0_05\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n### 参考文章\n\n* [百度知道-linux下如何设置JDK环境变量][1]\n\n\n  [1]: http://zhidao.baidu.com/link?url=0XeoCXTgx-QLIMZVfWQlsak206gNr_7dkmdYHenFEB25gyt35Ctqzq5W0Kp9WmYaJT2LhSBsacETKP5Iizefm_\n","source":"_posts/linux-install-sdk-and-maven.md","raw":"---\nlayout: post\ntitle: \"Linux系统安装配置JDK与Maven\"\ndate: 2015-01-03\ncategories: \n- linux\ntags: \n- linux\n- maven\n- jdk\ndescription: Linux 系统下快速按安装配置JDK与Maven的多种方法及利弊。\n\n---\n\nLinux 系统下快速按安装配置JDK与Maven的多种方法及利弊。\n\n<!-- more -->\n\n### 下载\n\n> Java  \n> http://www.oracle.com/technetwork/java/javase/downloads/index.html  \n> Maven  \n> http://maven.apache.org/download.cgi\n\n### 配置\n\n修改 `/etc/profile` 文件\n#### Java\n```\nJAVA_HOME=/usr/share/jdk1.5.0_05 \nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \nexport JAVA_HOME \nexport PATH \nexport CLASSPATH\n```\n#### Maven\n\n```\nMAVEN_HOME=~/apache-maven-3.2.3\nexport MAVEN_HOME\n```\n\n#### 即刻生效修改\n```\nsource /etc/profile\n```\n\n\n### 其他配置方法\n\n上述方法是通过修改/etc/profile文件，但这个修改是全局的，所以，基于安全考虑，当只需要给某个用户权限使用这个环境变量的时候，只需修改该用户目录下的.bashrc文件并重启系统即可。\n当然也可以直接在sheel中设置，不过此方法设置后，在关闭了sheel后就会失效， 看需求使用\n\n```\n# 在sheel中导入JDK配置\nexport JAVA_HOME=/usr/share/jdk1.5.0_05\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n### 参考文章\n\n* [百度知道-linux下如何设置JDK环境变量][1]\n\n\n  [1]: http://zhidao.baidu.com/link?url=0XeoCXTgx-QLIMZVfWQlsak206gNr_7dkmdYHenFEB25gyt35Ctqzq5W0Kp9WmYaJT2LhSBsacETKP5Iizefm_\n","slug":"linux-install-sdk-and-maven","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xf0012jgx4txpj4api"},{"layout":"post","title":"基类构造函数，子类构造函数，成员类构造函数的调用顺序","date":"2014-05-18T16:00:00.000Z","_content":"\n这是Java 笔试经常遇到的一个问题，所有特定写代码研究下。\n\n<!-- more -->\n\n\n\n```\n\tclass Father {\n\t    public Father() {\n\t        System.out.println(\"In Father\");\n\t    }\n\t}\n\n\tclass Children extends Father {\n\t    private Friend friend = new Friend();\n\t    public Children() {\n\t        System.out.println(\"In Children\");\n\t    }\n\n\t}\n\n\tclass Friend {\n\t    public Friend() {\n\t        System.out.println(\"In Friend\");\n\t    }\n\t}\n```\n\n\n以上三个对象，运行 ``` new Children(); ``` ，执行的结果是\n\n\tIn Father\n\tIn Friend\n\tIn Children\n\n\n### 结论\n先执行基类构造函数，再执行成员类构造函数，最后执行子类构造函数。","source":"_posts/java-constructor-base.md","raw":"---\nlayout: post\ntitle: \"基类构造函数，子类构造函数，成员类构造函数的调用顺序\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\n\n---\n\n这是Java 笔试经常遇到的一个问题，所有特定写代码研究下。\n\n<!-- more -->\n\n\n\n```\n\tclass Father {\n\t    public Father() {\n\t        System.out.println(\"In Father\");\n\t    }\n\t}\n\n\tclass Children extends Father {\n\t    private Friend friend = new Friend();\n\t    public Children() {\n\t        System.out.println(\"In Children\");\n\t    }\n\n\t}\n\n\tclass Friend {\n\t    public Friend() {\n\t        System.out.println(\"In Friend\");\n\t    }\n\t}\n```\n\n\n以上三个对象，运行 ``` new Children(); ``` ，执行的结果是\n\n\tIn Father\n\tIn Friend\n\tIn Children\n\n\n### 结论\n先执行基类构造函数，再执行成员类构造函数，最后执行子类构造函数。","slug":"java-constructor-base","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xi0019jgx4kadmv7zj"},{"layout":"post","title":"finally引起的异常丢失问题","date":"2014-05-18T16:00:00.000Z","description":"finally引起的异常丢失问题","_content":"\nfinally 使用不当可能出现异常丢失问题，并且该缺陷尚未被修复， 开发中需要多加注意\n\n<!-- more -->\n\n### 场景一\n\n```Java\n\n\tpublic void loseException() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\tthrow new Exception(\"Exception B\");\n\t\t}\n\t}\n\n```\n\n调用 ``` loseException() ``` 你会发现，Exception A 被 Exception B覆盖掉了。这是非常严重的设计缺陷，并且很难察觉这些错误。\n目前Java还未修正这个错误。 其解决办法是将所有抛出异常的方法都打包同一个try-catch中。  \n\n### 场景二\n\n```Java\n\n\tpublic void loseException2() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\treturn;\n\t\t}\n\t}\n\n```\n\n这种方法让你更简单粗暴的丢失异常，并且不会产生任何输出。","source":"_posts/finally-lose.md","raw":"---\nlayout: post\ntitle: \"finally引起的异常丢失问题\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription: finally引起的异常丢失问题\n\n---\n\nfinally 使用不当可能出现异常丢失问题，并且该缺陷尚未被修复， 开发中需要多加注意\n\n<!-- more -->\n\n### 场景一\n\n```Java\n\n\tpublic void loseException() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\tthrow new Exception(\"Exception B\");\n\t\t}\n\t}\n\n```\n\n调用 ``` loseException() ``` 你会发现，Exception A 被 Exception B覆盖掉了。这是非常严重的设计缺陷，并且很难察觉这些错误。\n目前Java还未修正这个错误。 其解决办法是将所有抛出异常的方法都打包同一个try-catch中。  \n\n### 场景二\n\n```Java\n\n\tpublic void loseException2() throws Exception {\n\t\ttry {\n\t\t\tthrow new Exception(\"Exception A\");\n\t\t} finally {\n\t\t\treturn;\n\t\t}\n\t}\n\n```\n\n这种方法让你更简单粗暴的丢失异常，并且不会产生任何输出。","slug":"finally-lose","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xk001cjgx4o8nz7s4g"},{"layout":"post","title":"final, finally, finalize的区别","date":"2014-05-18T16:00:00.000Z","description":"final, finally, finalize的区别","_content":"\n\n## final, finally, finalize的区别\n### final\n* 如果一个类被声明为final，此类被能被重载。因此final和abstract不能同时修饰一个类\n* 如果一个方法被声明为final，此方法只能被使用，不能被重载\n* 如果一个变量被声明为final，此变量只能被使用，不能被修改，并且在声明的时候一定要初始化\n\n<!-- more -->\n\n### finally\n异常处理的程序块，使用finally来进行必要的清理工作（如关闭数据库联系，文件流之类的）。  \n值得一提的是  \n\n```\npublic int testFinally1() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\npublic int testFinally2() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\n```\ntestFinally1()返回的值是1，testFinally2()返回的值是2。 也就是说，finally会在return后执行。并且，return后，变量的改变并不会对返回值照成影响\n\n### finalize\n类似于C++的析构函数，但实际上有很大区别，垃圾回收器准备释放对象占用的存储空间的时候，就会调用finalize()方法，做一些清理工作。但是必须等到下一次垃圾回收回收动作才会回收内存。  \n所以，并不是finalize调用后内存就会被回收。因为垃圾回收是需要系统开销的。不到内存濒临用光或者程序退出的时候，垃圾回收动作很可能不会发送。  \n另外，，执行finalize的线程优先级一般比较低，所以即使垃圾回收器工作，finalize也不一定得到及时的执行  \nfinalize使用场景：\n  \n* 调用本地方法（如C，C++），其申请的内存是不会被垃圾回收器回收的。finalize可用来回收这部分内存。\n* 用于发现如文件是否被关闭，连接是否被关闭这种情景。","source":"_posts/final-finally-finalize-diff.md","raw":"---\nlayout: post\ntitle: \"final, finally, finalize的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription:  final, finally, finalize的区别\n\n---\n\n\n## final, finally, finalize的区别\n### final\n* 如果一个类被声明为final，此类被能被重载。因此final和abstract不能同时修饰一个类\n* 如果一个方法被声明为final，此方法只能被使用，不能被重载\n* 如果一个变量被声明为final，此变量只能被使用，不能被修改，并且在声明的时候一定要初始化\n\n<!-- more -->\n\n### finally\n异常处理的程序块，使用finally来进行必要的清理工作（如关闭数据库联系，文件流之类的）。  \n值得一提的是  \n\n```\npublic int testFinally1() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\npublic int testFinally2() {\n    int i = 0;\n    try {\n        i++;\n        return i++;\n    } finally {\n        System.out.println(\"In finally\");\n        i++;\n    }\n}\n```\ntestFinally1()返回的值是1，testFinally2()返回的值是2。 也就是说，finally会在return后执行。并且，return后，变量的改变并不会对返回值照成影响\n\n### finalize\n类似于C++的析构函数，但实际上有很大区别，垃圾回收器准备释放对象占用的存储空间的时候，就会调用finalize()方法，做一些清理工作。但是必须等到下一次垃圾回收回收动作才会回收内存。  \n所以，并不是finalize调用后内存就会被回收。因为垃圾回收是需要系统开销的。不到内存濒临用光或者程序退出的时候，垃圾回收动作很可能不会发送。  \n另外，，执行finalize的线程优先级一般比较低，所以即使垃圾回收器工作，finalize也不一定得到及时的执行  \nfinalize使用场景：\n  \n* 调用本地方法（如C，C++），其申请的内存是不会被垃圾回收器回收的。finalize可用来回收这部分内存。\n* 用于发现如文件是否被关闭，连接是否被关闭这种情景。","slug":"final-finally-finalize-diff","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xp001fjgx4undp86n7"},{"layout":"post","title":"Android 封装SDK时常用的注解","date":"2015-07-06T16:00:00.000Z","_content":"\n工作中，我们经常需要将功能模块封装成库供合作厂商调用， 如何写好一个健壮的Android Library有很多讲究，使用注解可以对SDK暴露给开发者的接口做出一些限制，从而尽可能地避免开发者错误地使用API。 下面我们介绍几种封装SDK时常用到的注解。\n\n<!-- more -->\n\n### IntDef与StringDef\n\n我们有时候会使用int常量或者String常量来代替枚举， 特别在你编写SDK的时候，你可以通过IntDef或者StringDef来限制接口可接受的参数。  \n\n比如，有一个 `disableChannel`的接口，用来关闭指定的`channel` 。 我们可以先定义自己的注解`@RequirePayChannel`\n\n``` java\npublic static final int CHANNEL_UNIONPAY = 0x11000;\npublic static final int CHANNEL_ALIPAY = 0x12000;\npublic static final int CHANNEL_WECHAT = 0x13000;\n\n@Retention(RetentionPolicy.SOURCE)\n@IntDef({CHANNEL_UNIONPAY,CHANNEL_ALIPAY,CHANNEL_WECHAT})\npublic @interface RequirePayChannel {}\n```\n\n这样，你便可以通过`@RequirePayChannel`来指定disableChannel()的可接受参数\n\n``` java\npublic void enableChannel(@RequirePayChannel int channel) {\n\t// do something\n}\n```\n\n这样，一些IDE还会自动提供给你建议参数。如果填入指点范围之外的参数，将会出现错误提示并无法编译通过。\n![错误提示2][2]\n值得一说的是， 在这里，我们使用到了`@Retention(RetentionPolicy.SOURCE)`。 它指定了编译器在处理Animation时候的处理方法。 默认编译器会将常量替换成对应的数值，如果没指定该注解，你编译完成后将得到这样的class文件:\n\n![反编译RequirePayChannel][1]\n\n这样会导致IDE不能提示到有意义的信息。并且一定要指定为特定的int数值，否则也无法编译通过。\n![错误提示3][3]\n所以，应该指定`Retention`让编译器不对该注解做额外的优化处理。\n\n### DrawableRes, StringRes 与 DimenRes\n\n当我们在编写指定资源文件的接口时，可以通过资源注解来指定该方法接受的资源类型。 指定错误的资源将不能编译通过。 下面代码中，我们使用`@DrawableRes`来表明`setLogo`方法只支持Drawable资源的ID。\n\n```java\npublic void setLogo(@DrawableRes int resurceId) {\n    // do something\n}\n\n```\n当我们提供错误的资源，IDE将会报错。\n![错误提示4][4]  \n\n`@StringRes` 与 `@DimenRes` 的使用方法也类似。\n\n### NonNull 与 Nullable\n\n将一个空值传入一个方法中可能引发潜在的Crash。 我们应该极力避免这种情况， @NonNull 可以指定参数是否接受空值，当我们传入一个空值的时候，IDE会给出响应的警告。 我们可以这样使用它：\n\n```java\npublic void setContext(@NonNull Context context) {\n    // do something\n}\n```\n当我们对其传入一个空值的时候，将会显示警告（但代码仍然能通过编译）\n![错误提示5][5]  \n\n`@Nullable` 用于修饰参数或者方法的返回值可能为空，提醒开发者主要空值检查。\n\n```\n@Nullable\npublic Context getContext() {return null;}\n```\n\n![错误提示6][6]  \n\n\n\n\n[1]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_anination_class.png\n[2]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_error_tip.png\n[3]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_error_tip2.png\n[4]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/drawable_res_error_tip.png\n[5]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/non_null_waring_tip.png\n[6]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/nullable_waring_tip.png\n","source":"_posts/android-annotations-start.md","raw":"---\nlayout: post\ntitle: \"Android 封装SDK时常用的注解\"\ndate: 2015-07-07\ncategories:\n- android\ntags:\n- android\n\n---\n\n工作中，我们经常需要将功能模块封装成库供合作厂商调用， 如何写好一个健壮的Android Library有很多讲究，使用注解可以对SDK暴露给开发者的接口做出一些限制，从而尽可能地避免开发者错误地使用API。 下面我们介绍几种封装SDK时常用到的注解。\n\n<!-- more -->\n\n### IntDef与StringDef\n\n我们有时候会使用int常量或者String常量来代替枚举， 特别在你编写SDK的时候，你可以通过IntDef或者StringDef来限制接口可接受的参数。  \n\n比如，有一个 `disableChannel`的接口，用来关闭指定的`channel` 。 我们可以先定义自己的注解`@RequirePayChannel`\n\n``` java\npublic static final int CHANNEL_UNIONPAY = 0x11000;\npublic static final int CHANNEL_ALIPAY = 0x12000;\npublic static final int CHANNEL_WECHAT = 0x13000;\n\n@Retention(RetentionPolicy.SOURCE)\n@IntDef({CHANNEL_UNIONPAY,CHANNEL_ALIPAY,CHANNEL_WECHAT})\npublic @interface RequirePayChannel {}\n```\n\n这样，你便可以通过`@RequirePayChannel`来指定disableChannel()的可接受参数\n\n``` java\npublic void enableChannel(@RequirePayChannel int channel) {\n\t// do something\n}\n```\n\n这样，一些IDE还会自动提供给你建议参数。如果填入指点范围之外的参数，将会出现错误提示并无法编译通过。\n![错误提示2][2]\n值得一说的是， 在这里，我们使用到了`@Retention(RetentionPolicy.SOURCE)`。 它指定了编译器在处理Animation时候的处理方法。 默认编译器会将常量替换成对应的数值，如果没指定该注解，你编译完成后将得到这样的class文件:\n\n![反编译RequirePayChannel][1]\n\n这样会导致IDE不能提示到有意义的信息。并且一定要指定为特定的int数值，否则也无法编译通过。\n![错误提示3][3]\n所以，应该指定`Retention`让编译器不对该注解做额外的优化处理。\n\n### DrawableRes, StringRes 与 DimenRes\n\n当我们在编写指定资源文件的接口时，可以通过资源注解来指定该方法接受的资源类型。 指定错误的资源将不能编译通过。 下面代码中，我们使用`@DrawableRes`来表明`setLogo`方法只支持Drawable资源的ID。\n\n```java\npublic void setLogo(@DrawableRes int resurceId) {\n    // do something\n}\n\n```\n当我们提供错误的资源，IDE将会报错。\n![错误提示4][4]  \n\n`@StringRes` 与 `@DimenRes` 的使用方法也类似。\n\n### NonNull 与 Nullable\n\n将一个空值传入一个方法中可能引发潜在的Crash。 我们应该极力避免这种情况， @NonNull 可以指定参数是否接受空值，当我们传入一个空值的时候，IDE会给出响应的警告。 我们可以这样使用它：\n\n```java\npublic void setContext(@NonNull Context context) {\n    // do something\n}\n```\n当我们对其传入一个空值的时候，将会显示警告（但代码仍然能通过编译）\n![错误提示5][5]  \n\n`@Nullable` 用于修饰参数或者方法的返回值可能为空，提醒开发者主要空值检查。\n\n```\n@Nullable\npublic Context getContext() {return null;}\n```\n\n![错误提示6][6]  \n\n\n\n\n[1]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_anination_class.png\n[2]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_error_tip.png\n[3]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/int_def_error_tip2.png\n[4]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/drawable_res_error_tip.png\n[5]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/non_null_waring_tip.png\n[6]: http://7jpp6b.com1.z0.glb.clouddn.com/blog/nullable_waring_tip.png\n","slug":"android-annotations-start","published":1,"updated":"2015-07-07T16:06:45.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xs001ijgx4a57phetb"},{"layout":"post","title":"Agenda笔记","date":"2014-12-28T16:00:00.000Z","_content":"\n[Agenda][1]是类似Quarzt的轻量级持久化任务调度框架, 数据存储再mongodb上, 部署与学习十分简单.\n第三方开发者还为Agenda提供了一个简易的UI界面 [Agenda UI][2]. 提供简单的可视化界面.\n\n<!-- more -->\n\n### Base\nAgenda 将任务对象保存再mongo里面, 任务对象包含任务的name, 附带数据, 定时规则等.\n我们可以动态对任务进行CRUD操作. Agenda提供对应API.\n\n虽然Agenda本身提供的对Job的操作比较简单, 但因为Agenda的Job都是存储再mongo之中,所以我们可以通过直接操作monogo实现的Job的更新与删除.\n\n### Start\n简单的添加任务操作:\n```\nvar job = agenda.create('testJob', {key: \"value\"});\njob.repeatEvery('5 seconds');\njob.save(function(err) {\n    console.log(\"Job successfully saved\");\n});\n```\n程序开始时,我们需要创建agenda对象,指定事件响应函数,并开始执行任务调用.\n\n```\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'});\nagenda.define('testJob',  function(job) {\n    console.log(\"Job execute, now is \" + new Date()  + \" Data=\" + JSON.stringify(job.attrs.data));\n});\nagenda.run();\n```\n\n\n#### 数据存储\nAgenda使用mongodb。\n\n```\n// 指定使用的mongodb，默认使用agendaJobs集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'}});\n\n// 如果需要指定其他集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-test', collection: 'agendaJobs' }});\n```\n\n#### 指定循环规制\n\n```\n// 直接构造的agenda对象的时候指定\nvar agenda = new Agenda({processEvery: '1 minute'});\n// 1分钟循环一次\nagenda.processEvery('1 minute');\n\n```\n\n#### 指定任务最大并发数\n\n```\n// 构造时指定\nvar agenda = new Agenda({maxConcurrency: 20});\n// 直接指定\nagenda.maxConcurrency(20);\n```\n\n#### 指定默认并发数\n\n```\n// 构造时指定\nagenda.defaultConcurrency(5);\n// 直接指定\nvar agenda = new Agenda({defaultConcurrency: 5});\n```\n\n#### 设置任务最大响应时间\n指定任务从开始执行到调用finish的时间（指调用done函数），这能有效的解决任务奔溃或者超时\n\n\n```\n// 构造时指定\nvar agenda = new Agenda({defaultLockLifetime: 10000});\n// 直接指定\nagenda.defaultLockLifetime(10000);\n```\n\n\n### 定义任务处理器\n\n#### 定义任务行为\n当执行的任务为异步方法的时候，需要再方法最后调用done()\n如果为同步方法，则省略声明done\n\n影响任务行为的参数：\n\n* concurrency 指定最大任务并发数\n* lockLifetime 锁生存时间,指定异步调用时最长等待时间\n* priority 优先级(lowest|low|normal|high|highest|number)\n\n\n```\n// 执行任务为异步方法\nagenda.define('job_name', function(job, done) {\n    doSomething(function() {\n        done();\n    });\n});\n\n// 执行任务为同步方法\nagenda.define('say hello', function(job) {\n  console.log(\"Hello!\");\n});\n```\n\n#### 定时任务\n\n指定任务重复的规制,支持数字, cron表达式, 甚至如10 minutes等可读性较高的表达式\n\n```\njob.repeatEvery('10 minutes');\njob.repeatEvery('*/10 * * * * * *');\n```\n\n指定特定的重复时间\n\n```\n// 每天15:30\njob.repeatAt('3:30pm');\n```\n指定只执行一次的的任务\n\n```\njob.schedule('3:30pm');\n```\n\nnow\n马上执行某事件\n```\nagenda.now('do the hokey pokey');\n```\n\n\n  [1]: https://github.com/rschmukler/agenda\n  [2]: https://github.com/moudy/agenda-ui","source":"_posts/agenda-start.md","raw":"---\nlayout: post\ntitle: \"Agenda笔记\"\ndate: 2014-12-29\ncategories:\n- nodejs\ntags:\n- agenda\n\n---\n\n[Agenda][1]是类似Quarzt的轻量级持久化任务调度框架, 数据存储再mongodb上, 部署与学习十分简单.\n第三方开发者还为Agenda提供了一个简易的UI界面 [Agenda UI][2]. 提供简单的可视化界面.\n\n<!-- more -->\n\n### Base\nAgenda 将任务对象保存再mongo里面, 任务对象包含任务的name, 附带数据, 定时规则等.\n我们可以动态对任务进行CRUD操作. Agenda提供对应API.\n\n虽然Agenda本身提供的对Job的操作比较简单, 但因为Agenda的Job都是存储再mongo之中,所以我们可以通过直接操作monogo实现的Job的更新与删除.\n\n### Start\n简单的添加任务操作:\n```\nvar job = agenda.create('testJob', {key: \"value\"});\njob.repeatEvery('5 seconds');\njob.save(function(err) {\n    console.log(\"Job successfully saved\");\n});\n```\n程序开始时,我们需要创建agenda对象,指定事件响应函数,并开始执行任务调用.\n\n```\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'});\nagenda.define('testJob',  function(job) {\n    console.log(\"Job execute, now is \" + new Date()  + \" Data=\" + JSON.stringify(job.attrs.data));\n});\nagenda.run();\n```\n\n\n#### 数据存储\nAgenda使用mongodb。\n\n```\n// 指定使用的mongodb，默认使用agendaJobs集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-example'}});\n\n// 如果需要指定其他集合\nvar agenda = new Agenda({db: { address: 'localhost:27017/agenda-test', collection: 'agendaJobs' }});\n```\n\n#### 指定循环规制\n\n```\n// 直接构造的agenda对象的时候指定\nvar agenda = new Agenda({processEvery: '1 minute'});\n// 1分钟循环一次\nagenda.processEvery('1 minute');\n\n```\n\n#### 指定任务最大并发数\n\n```\n// 构造时指定\nvar agenda = new Agenda({maxConcurrency: 20});\n// 直接指定\nagenda.maxConcurrency(20);\n```\n\n#### 指定默认并发数\n\n```\n// 构造时指定\nagenda.defaultConcurrency(5);\n// 直接指定\nvar agenda = new Agenda({defaultConcurrency: 5});\n```\n\n#### 设置任务最大响应时间\n指定任务从开始执行到调用finish的时间（指调用done函数），这能有效的解决任务奔溃或者超时\n\n\n```\n// 构造时指定\nvar agenda = new Agenda({defaultLockLifetime: 10000});\n// 直接指定\nagenda.defaultLockLifetime(10000);\n```\n\n\n### 定义任务处理器\n\n#### 定义任务行为\n当执行的任务为异步方法的时候，需要再方法最后调用done()\n如果为同步方法，则省略声明done\n\n影响任务行为的参数：\n\n* concurrency 指定最大任务并发数\n* lockLifetime 锁生存时间,指定异步调用时最长等待时间\n* priority 优先级(lowest|low|normal|high|highest|number)\n\n\n```\n// 执行任务为异步方法\nagenda.define('job_name', function(job, done) {\n    doSomething(function() {\n        done();\n    });\n});\n\n// 执行任务为同步方法\nagenda.define('say hello', function(job) {\n  console.log(\"Hello!\");\n});\n```\n\n#### 定时任务\n\n指定任务重复的规制,支持数字, cron表达式, 甚至如10 minutes等可读性较高的表达式\n\n```\njob.repeatEvery('10 minutes');\njob.repeatEvery('*/10 * * * * * *');\n```\n\n指定特定的重复时间\n\n```\n// 每天15:30\njob.repeatAt('3:30pm');\n```\n指定只执行一次的的任务\n\n```\njob.schedule('3:30pm');\n```\n\nnow\n马上执行某事件\n```\nagenda.now('do the hokey pokey');\n```\n\n\n  [1]: https://github.com/rschmukler/agenda\n  [2]: https://github.com/moudy/agenda-ui","slug":"agenda-start","published":1,"updated":"2015-07-08T04:25:25.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xv001njgx4fmd64qq0"},{"layout":"post","title":"String，StringBuffer，StringBuilder的区别","date":"2014-05-18T16:00:00.000Z","desciption":"String，StringBuffer，StringBuilder的区别","_content":"\n### String\nString值是不可变的，每次对String的操作都会生出一个新的String对象。如果频繁改动的话，效率会很低，产生太多的垃圾会触发JVM的垃圾回收，影响系统性能。  \n另外 `String s = new String(\"abc\") ` 会生出两个对象, 因为括号里面的\"abc\"算一。\n\n<!-- more -->\n\n### StringBuffer\n可变长度的字符串缓存区，特定是在append与insert操作的时候，速度会比String快很多。并且在多线程下是安全的。如果大量频繁的字符串操作，考虑使用该类。  \n\n\n### StringBuilder\n5.0后新增的方法，在多线程下不保证同步（即线程不安全），但速度会比StringBuffer快。所以，在单线程的环境下，建议使用StringBuilder。 \n\n### 总结\n一般情况下，对字符串的操作速度 StringBuilder > StringBuffer > String。  \n* 字符串操作少的情况，使用 String\n* 单线程，字符串操作多的情况， 使用StringBuilder\n* 多线程，字符串操作多的情况， 使用StringBuffer\n\n### 额外的注意\n`String s = a + b ` 的情况 ，实际上JVM的处理是这样` String c = (new StringBuilder(String.valueOf(a))).append(b).toString() `  \n如此一来每次字符串操作都会生出一个StringBuffer对象。效率多少会有点影响的。\n","source":"_posts/String-StringBuffer-StringBuilder-diff.md","raw":"---\nlayout: post\ntitle: \"String，StringBuffer，StringBuilder的区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndesciption: String，StringBuffer，StringBuilder的区别\n\n---\n\n### String\nString值是不可变的，每次对String的操作都会生出一个新的String对象。如果频繁改动的话，效率会很低，产生太多的垃圾会触发JVM的垃圾回收，影响系统性能。  \n另外 `String s = new String(\"abc\") ` 会生出两个对象, 因为括号里面的\"abc\"算一。\n\n<!-- more -->\n\n### StringBuffer\n可变长度的字符串缓存区，特定是在append与insert操作的时候，速度会比String快很多。并且在多线程下是安全的。如果大量频繁的字符串操作，考虑使用该类。  \n\n\n### StringBuilder\n5.0后新增的方法，在多线程下不保证同步（即线程不安全），但速度会比StringBuffer快。所以，在单线程的环境下，建议使用StringBuilder。 \n\n### 总结\n一般情况下，对字符串的操作速度 StringBuilder > StringBuffer > String。  \n* 字符串操作少的情况，使用 String\n* 单线程，字符串操作多的情况， 使用StringBuilder\n* 多线程，字符串操作多的情况， 使用StringBuffer\n\n### 额外的注意\n`String s = a + b ` 的情况 ，实际上JVM的处理是这样` String c = (new StringBuilder(String.valueOf(a))).append(b).toString() `  \n如此一来每次字符串操作都会生出一个StringBuffer对象。效率多少会有点影响的。\n","slug":"String-StringBuffer-StringBuilder-diff","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6xz001sjgx4hx1z2sl3"},{"layout":"post","title":"HashMap,HashTable区别","date":"2014-05-18T16:00:00.000Z","description":"实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap","_content":"\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n\n<!-- more -->\n\n## HashMap,HashTable区别\n\n### HashTable\n特点：线程同步 \n\n### HashMap\n特定：\n\n* 线程不同步，但可以通过 ``` Collections.synchronizedMap(HashMap map) ``` 实现线程同步。\n* 允许Key，value值为空。\n* 优于HashTable的Hash算法，使Hash值更广泛的分布到数组的不同位置。\n* 更优的效率\n\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n","source":"_posts/HashMap-HashTable-diff.md","raw":"---\nlayout: post\ntitle: \"HashMap,HashTable区别\"\ndate: 2014-05-19\ncategories:\n- java\ntags:\n- java\ndescription: 实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap\n\n---\n\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n\n<!-- more -->\n\n## HashMap,HashTable区别\n\n### HashTable\n特点：线程同步 \n\n### HashMap\n特定：\n\n* 线程不同步，但可以通过 ``` Collections.synchronizedMap(HashMap map) ``` 实现线程同步。\n* 允许Key，value值为空。\n* 优于HashTable的Hash算法，使Hash值更广泛的分布到数组的不同位置。\n* 更优的效率\n\n实际应用中，我们并不经常需要保证HashMap这些底层代码的同步，交由上层逻辑去控制同步。所以，大多数时候建议使用HashMap.\n","slug":"HashMap-HashTable-diff","published":1,"updated":"2015-07-08T04:20:36.000Z","comments":1,"photos":[],"link":"","_id":"cibu9v6y2001vjgx4x6qx74t5"}],"PostAsset":[],"PostCategory":[{"post_id":"cibu9v6w10000jgx47dtr3u92","category_id":"cibu9v6w60001jgx4bbwvbuuh","_id":"cibu9v6w80004jgx47l8iid36"},{"post_id":"cibu9v6wu0005jgx4v0b7gwxz","category_id":"cibu9v6w60001jgx4bbwvbuuh","_id":"cibu9v6wv0006jgx429q28bm2"},{"post_id":"cibu9v6wx0009jgx4tnxe6kx4","category_id":"cibu9v6w60001jgx4bbwvbuuh","_id":"cibu9v6wy000ajgx4jf7pfbzz"},{"post_id":"cibu9v6x0000djgx4thiqwi0m","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6x1000hjgx42irmkyk5"},{"post_id":"cibu9v6x3000ijgx4tlvyhly4","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6x4000jjgx4hha1l8wf"},{"post_id":"cibu9v6x6000mjgx4ymjtvoov","category_id":"cibu9v6x7000njgx4dvsaykzm","_id":"cibu9v6x8000qjgx4mfzd1yk8"},{"post_id":"cibu9v6x9000rjgx40mgvrbs0","category_id":"cibu9v6xa000sjgx4nkwea6z6","_id":"cibu9v6xb000vjgx486xshomf"},{"post_id":"cibu9v6xd000yjgx4z6docqhb","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6xd000zjgx4ivycwdbd"},{"post_id":"cibu9v6xf0012jgx4txpj4api","category_id":"cibu9v6xg0013jgx4gy8ez9qa","_id":"cibu9v6xg0016jgx4v4lww143"},{"post_id":"cibu9v6xi0019jgx4kadmv7zj","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6xj001ajgx4o2a4edqr"},{"post_id":"cibu9v6xk001cjgx4o8nz7s4g","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6xm001djgx4q6zorx9x"},{"post_id":"cibu9v6xp001fjgx4undp86n7","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6xr001gjgx4fmf4tamz"},{"post_id":"cibu9v6xs001ijgx4a57phetb","category_id":"cibu9v6xs001jjgx4oghzrlvx","_id":"cibu9v6xu001mjgx4c9p6s4jj"},{"post_id":"cibu9v6xv001njgx4fmd64qq0","category_id":"cibu9v6xw001ojgx47gok4ybr","_id":"cibu9v6xx001rjgx4vmcpfsrm"},{"post_id":"cibu9v6xz001sjgx4hx1z2sl3","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6y0001tjgx48j0lrfhx"},{"post_id":"cibu9v6y2001vjgx4x6qx74t5","category_id":"cibu9v6x1000ejgx4uapqs4kr","_id":"cibu9v6y3001wjgx42aeuwwvj"}],"PostTag":[{"post_id":"cibu9v6w10000jgx47dtr3u92","tag_id":"cibu9v6w60002jgx47zfwsob2","_id":"cibu9v6w80003jgx4y1pt049c"},{"post_id":"cibu9v6wu0005jgx4v0b7gwxz","tag_id":"cibu9v6wv0007jgx475ujdbc1","_id":"cibu9v6wv0008jgx46ro4hpdv"},{"post_id":"cibu9v6wx0009jgx4tnxe6kx4","tag_id":"cibu9v6wy000bjgx4ykz5h2t3","_id":"cibu9v6wy000cjgx4mevvpb7r"},{"post_id":"cibu9v6x0000djgx4thiqwi0m","tag_id":"cibu9v6x1000fjgx4uoovlhss","_id":"cibu9v6x1000gjgx4c3p07ou1"},{"post_id":"cibu9v6x3000ijgx4tlvyhly4","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6x4000ljgx458ffs87b"},{"post_id":"cibu9v6x6000mjgx4ymjtvoov","tag_id":"cibu9v6x7000ojgx4qplrcu0v","_id":"cibu9v6x7000pjgx4d9nij5d5"},{"post_id":"cibu9v6x9000rjgx40mgvrbs0","tag_id":"cibu9v6xb000tjgx4beo14v2d","_id":"cibu9v6xb000wjgx4ylcksg5q"},{"post_id":"cibu9v6x9000rjgx40mgvrbs0","tag_id":"cibu9v6xb000ujgx48ja5ehvr","_id":"cibu9v6xb000xjgx49y8s44av"},{"post_id":"cibu9v6xd000yjgx4z6docqhb","tag_id":"cibu9v6xd0010jgx4edo20tey","_id":"cibu9v6xe0011jgx4q0ay77s2"},{"post_id":"cibu9v6xf0012jgx4txpj4api","tag_id":"cibu9v6wv0007jgx475ujdbc1","_id":"cibu9v6xg0015jgx4yz4c7efr"},{"post_id":"cibu9v6xf0012jgx4txpj4api","tag_id":"cibu9v6xd0010jgx4edo20tey","_id":"cibu9v6xg0017jgx4gk22a021"},{"post_id":"cibu9v6xf0012jgx4txpj4api","tag_id":"cibu9v6xg0014jgx4koe3rds2","_id":"cibu9v6xh0018jgx4o9nx8ifi"},{"post_id":"cibu9v6xi0019jgx4kadmv7zj","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6xj001bjgx42ngxzse7"},{"post_id":"cibu9v6xk001cjgx4o8nz7s4g","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6xn001ejgx4xn8owcc7"},{"post_id":"cibu9v6xp001fjgx4undp86n7","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6xr001hjgx4soz0l9pd"},{"post_id":"cibu9v6xs001ijgx4a57phetb","tag_id":"cibu9v6xt001kjgx4bgx420ee","_id":"cibu9v6xu001ljgx4v2elwciu"},{"post_id":"cibu9v6xv001njgx4fmd64qq0","tag_id":"cibu9v6xx001pjgx47ndnns17","_id":"cibu9v6xx001qjgx4i9ipsqrn"},{"post_id":"cibu9v6xz001sjgx4hx1z2sl3","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6y0001ujgx44v40746j"},{"post_id":"cibu9v6y2001vjgx4x6qx74t5","tag_id":"cibu9v6x4000kjgx4rh2xjf8z","_id":"cibu9v6y3001xjgx40zv4rga2"}],"Tag":[{"name":"sublime-text","_id":"cibu9v6w60002jgx47zfwsob2"},{"name":"linux","_id":"cibu9v6wv0007jgx475ujdbc1"},{"name":"git","_id":"cibu9v6wy000bjgx4ykz5h2t3"},{"name":"spring-test","_id":"cibu9v6x1000fjgx4uoovlhss"},{"name":"java","_id":"cibu9v6x4000kjgx4rh2xjf8z"},{"name":"mysql","_id":"cibu9v6x7000ojgx4qplrcu0v"},{"name":"mqtt","_id":"cibu9v6xb000tjgx4beo14v2d"},{"name":"im","_id":"cibu9v6xb000ujgx48ja5ehvr"},{"name":"maven","_id":"cibu9v6xd0010jgx4edo20tey"},{"name":"jdk","_id":"cibu9v6xg0014jgx4koe3rds2"},{"name":"android","_id":"cibu9v6xt001kjgx4bgx420ee"},{"name":"agenda","_id":"cibu9v6xx001pjgx47ndnns17"}]}}